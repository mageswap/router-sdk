{"version":3,"file":"router-sdk.cjs.production.min.js","sources":["../src/approveAndCall.ts","../src/constants.ts","../src/multicallExtended.ts","../src/paymentsExtended.ts","../src/entities/mixedRoute/route.ts","../src/entities/mixedRoute/trade.ts","../src/entities/protocol.ts","../src/entities/route.ts","../src/entities/trade.ts","../src/utils/encodeMixedRouteToPath.ts","../src/utils/index.ts","../src/swapRouter.ts"],"sourcesContent":["import { Interface } from '@ethersproject/abi'\nimport invariant from 'tiny-invariant'\nimport { abi } from '@mageswap/swap-router-contracts/artifacts/contracts/interfaces/IApproveAndCall.sol/IApproveAndCall.json'\nimport { Currency, Percent, Token } from '@mageswap/sdk-core'\nimport {\n  MintSpecificOptions,\n  IncreaseSpecificOptions,\n  NonfungiblePositionManager,\n  Position,\n  toHex,\n} from '@mageswap/v3-sdk'\nimport JSBI from 'jsbi'\n\n// condensed version of v3-sdk AddLiquidityOptions containing only necessary swap + add attributes\nexport type CondensedAddLiquidityOptions = Omit<MintSpecificOptions, 'createPool'> | IncreaseSpecificOptions\n\nexport enum ApprovalTypes {\n  NOT_REQUIRED = 0,\n  MAX = 1,\n  MAX_MINUS_ONE = 2,\n  ZERO_THEN_MAX = 3,\n  ZERO_THEN_MAX_MINUS_ONE = 4,\n}\n\n// type guard\nexport function isMint(options: CondensedAddLiquidityOptions): options is Omit<MintSpecificOptions, 'createPool'> {\n  return Object.keys(options).some((k) => k === 'recipient')\n}\n\nexport abstract class ApproveAndCall {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  public static encodeApproveMax(token: Token): string {\n    return ApproveAndCall.INTERFACE.encodeFunctionData('approveMax', [token.address])\n  }\n\n  public static encodeApproveMaxMinusOne(token: Token): string {\n    return ApproveAndCall.INTERFACE.encodeFunctionData('approveMaxMinusOne', [token.address])\n  }\n\n  public static encodeApproveZeroThenMax(token: Token): string {\n    return ApproveAndCall.INTERFACE.encodeFunctionData('approveZeroThenMax', [token.address])\n  }\n\n  public static encodeApproveZeroThenMaxMinusOne(token: Token): string {\n    return ApproveAndCall.INTERFACE.encodeFunctionData('approveZeroThenMaxMinusOne', [token.address])\n  }\n\n  public static encodeCallPositionManager(calldatas: string[]): string {\n    invariant(calldatas.length > 0, 'NULL_CALLDATA')\n\n    if (calldatas.length == 1) {\n      return ApproveAndCall.INTERFACE.encodeFunctionData('callPositionManager', calldatas)\n    } else {\n      const encodedMulticall = NonfungiblePositionManager.INTERFACE.encodeFunctionData('multicall', [calldatas])\n      return ApproveAndCall.INTERFACE.encodeFunctionData('callPositionManager', [encodedMulticall])\n    }\n  }\n  /**\n   * Encode adding liquidity to a position in the nft manager contract\n   * @param position Forcasted position with expected amount out from swap\n   * @param minimalPosition Forcasted position with custom minimal token amounts\n   * @param addLiquidityOptions Options for adding liquidity\n   * @param slippageTolerance Defines maximum slippage\n   */\n  public static encodeAddLiquidity(\n    position: Position,\n    minimalPosition: Position,\n    addLiquidityOptions: CondensedAddLiquidityOptions,\n    slippageTolerance: Percent\n  ): string {\n    let { amount0: amount0Min, amount1: amount1Min } = position.mintAmountsWithSlippage(slippageTolerance)\n\n    // position.mintAmountsWithSlippage() can create amounts not dependenable in scenarios\n    // such as range orders. Allow the option to provide a position with custom minimum amounts\n    // for these scenarios\n    if (JSBI.lessThan(minimalPosition.amount0.quotient, amount0Min)) {\n      amount0Min = minimalPosition.amount0.quotient\n    }\n    if (JSBI.lessThan(minimalPosition.amount1.quotient, amount1Min)) {\n      amount1Min = minimalPosition.amount1.quotient\n    }\n\n    if (isMint(addLiquidityOptions)) {\n      return ApproveAndCall.INTERFACE.encodeFunctionData('mint', [\n        {\n          token0: position.pool.token0.address,\n          token1: position.pool.token1.address,\n          fee: position.pool.fee,\n          tickLower: position.tickLower,\n          tickUpper: position.tickUpper,\n          amount0Min: toHex(amount0Min),\n          amount1Min: toHex(amount1Min),\n          recipient: addLiquidityOptions.recipient,\n        },\n      ])\n    } else {\n      return ApproveAndCall.INTERFACE.encodeFunctionData('increaseLiquidity', [\n        {\n          token0: position.pool.token0.address,\n          token1: position.pool.token1.address,\n          amount0Min: toHex(amount0Min),\n          amount1Min: toHex(amount1Min),\n          tokenId: toHex(addLiquidityOptions.tokenId),\n        },\n      ])\n    }\n  }\n\n  public static encodeApprove(token: Currency, approvalType: ApprovalTypes): string {\n    switch (approvalType) {\n      case ApprovalTypes.MAX:\n        return ApproveAndCall.encodeApproveMax(token.wrapped)\n      case ApprovalTypes.MAX_MINUS_ONE:\n        return ApproveAndCall.encodeApproveMaxMinusOne(token.wrapped)\n      case ApprovalTypes.ZERO_THEN_MAX:\n        return ApproveAndCall.encodeApproveZeroThenMax(token.wrapped)\n      case ApprovalTypes.ZERO_THEN_MAX_MINUS_ONE:\n        return ApproveAndCall.encodeApproveZeroThenMaxMinusOne(token.wrapped)\n      default:\n        throw 'Error: invalid ApprovalType'\n    }\n  }\n}\n","import JSBI from 'jsbi'\n\nexport const MSG_SENDER = '0x0000000000000000000000000000000000000001'\nexport const ADDRESS_THIS = '0x0000000000000000000000000000000000000002'\n\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\n\n// = 1 << 23 or 100000000000000000000000\nexport const V2_FEE_PATH_PLACEHOLDER = 8388608\n","import { Interface } from '@ethersproject/abi'\nimport { BigintIsh } from '@mageswap/sdk-core'\nimport { abi } from '@mageswap/swap-router-contracts/artifacts/contracts/interfaces/IMulticallExtended.sol/IMulticallExtended.json'\nimport { Multicall, toHex } from '@mageswap/v3-sdk'\n\n// deadline or previousBlockhash\nexport type Validation = BigintIsh | string\n\nfunction validateAndParseBytes32(bytes32: string): string {\n  if (!bytes32.match(/^0x[0-9a-fA-F]{64}$/)) {\n    throw new Error(`${bytes32} is not valid bytes32.`)\n  }\n\n  return bytes32.toLowerCase()\n}\n\nexport abstract class MulticallExtended {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  public static encodeMulticall(calldatas: string | string[], validation?: Validation): string {\n    // if there's no validation, we can just fall back to regular multicall\n    if (typeof validation === 'undefined') {\n      return Multicall.encodeMulticall(calldatas)\n    }\n\n    // if there is validation, we have to normalize calldatas\n    if (!Array.isArray(calldatas)) {\n      calldatas = [calldatas]\n    }\n\n    // this means the validation value should be a previousBlockhash\n    if (typeof validation === 'string' && validation.startsWith('0x')) {\n      const previousBlockhash = validateAndParseBytes32(validation)\n      return MulticallExtended.INTERFACE.encodeFunctionData('multicall(bytes32,bytes[])', [\n        previousBlockhash,\n        calldatas,\n      ])\n    } else {\n      const deadline = toHex(validation)\n      return MulticallExtended.INTERFACE.encodeFunctionData('multicall(uint256,bytes[])', [deadline, calldatas])\n    }\n  }\n}\n","import { Interface } from '@ethersproject/abi'\nimport { Percent, Token, validateAndParseAddress } from '@mageswap/sdk-core'\nimport { abi } from '@mageswap/swap-router-contracts/artifacts/contracts/interfaces/IPeripheryPaymentsWithFeeExtended.sol/IPeripheryPaymentsWithFeeExtended.json'\nimport { FeeOptions, Payments, toHex } from '@mageswap/v3-sdk'\nimport JSBI from 'jsbi'\n\nfunction encodeFeeBips(fee: Percent): string {\n  return toHex(fee.multiply(10_000).quotient)\n}\n\nexport abstract class PaymentsExtended {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  public static encodeUnwrapWETH9(amountMinimum: JSBI, recipient?: string, feeOptions?: FeeOptions): string {\n    // if there's a recipient, just pass it along\n    if (typeof recipient === 'string') {\n      return Payments.encodeUnwrapWETH9(amountMinimum, recipient, feeOptions)\n    }\n\n    if (!!feeOptions) {\n      const feeBips = encodeFeeBips(feeOptions.fee)\n      const feeRecipient = validateAndParseAddress(feeOptions.recipient)\n\n      return PaymentsExtended.INTERFACE.encodeFunctionData('unwrapWETH9WithFee(uint256,uint256,address)', [\n        toHex(amountMinimum),\n        feeBips,\n        feeRecipient,\n      ])\n    } else {\n      return PaymentsExtended.INTERFACE.encodeFunctionData('unwrapWETH9(uint256)', [toHex(amountMinimum)])\n    }\n  }\n\n  public static encodeSweepToken(\n    token: Token,\n    amountMinimum: JSBI,\n    recipient?: string,\n    feeOptions?: FeeOptions\n  ): string {\n    // if there's a recipient, just pass it along\n    if (typeof recipient === 'string') {\n      return Payments.encodeSweepToken(token, amountMinimum, recipient, feeOptions)\n    }\n\n    if (!!feeOptions) {\n      const feeBips = encodeFeeBips(feeOptions.fee)\n      const feeRecipient = validateAndParseAddress(feeOptions.recipient)\n\n      return PaymentsExtended.INTERFACE.encodeFunctionData('sweepTokenWithFee(address,uint256,uint256,address)', [\n        token.address,\n        toHex(amountMinimum),\n        feeBips,\n        feeRecipient,\n      ])\n    } else {\n      return PaymentsExtended.INTERFACE.encodeFunctionData('sweepToken(address,uint256)', [\n        token.address,\n        toHex(amountMinimum),\n      ])\n    }\n  }\n\n  public static encodePull(token: Token, amount: JSBI): string {\n    return PaymentsExtended.INTERFACE.encodeFunctionData('pull', [token.address, toHex(amount)])\n  }\n\n  public static encodeWrapETH(amount: JSBI): string {\n    return PaymentsExtended.INTERFACE.encodeFunctionData('wrapETH', [toHex(amount)])\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { Currency, Price, Token } from '@mageswap/sdk-core'\nimport { Pool } from '@mageswap/v3-sdk'\nimport { Pair } from '@mageswap/v2-sdk'\n\ntype TPool = Pair | Pool\n\n/**\n * Represents a list of pools or pairs through which a swap can occur\n * @template TInput The input token\n * @template TOutput The output token\n */\nexport class MixedRouteSDK<TInput extends Currency, TOutput extends Currency> {\n  public readonly pools: TPool[]\n  public readonly path: Token[]\n  public readonly input: TInput\n  public readonly output: TOutput\n\n  private _midPrice: Price<TInput, TOutput> | null = null\n\n  /**\n   * Creates an instance of route.\n   * @param pools An array of `TPool` objects (pools or pairs), ordered by the route the swap will take\n   * @param input The input token\n   * @param output The output token\n   */\n  public constructor(pools: TPool[], input: TInput, output: TOutput) {\n    invariant(pools.length > 0, 'POOLS')\n\n    const chainId = pools[0].chainId\n    const allOnSameChain = pools.every((pool) => pool.chainId === chainId)\n    invariant(allOnSameChain, 'CHAIN_IDS')\n\n    const wrappedInput = input.wrapped\n    invariant(pools[0].involvesToken(wrappedInput), 'INPUT')\n\n    invariant(pools[pools.length - 1].involvesToken(output.wrapped), 'OUTPUT')\n\n    /**\n     * Normalizes token0-token1 order and selects the next token/fee step to add to the path\n     * */\n    const tokenPath: Token[] = [wrappedInput]\n    for (const [i, pool] of pools.entries()) {\n      const currentInputToken = tokenPath[i]\n      invariant(currentInputToken.equals(pool.token0) || currentInputToken.equals(pool.token1), 'PATH')\n      const nextToken = currentInputToken.equals(pool.token0) ? pool.token1 : pool.token0\n      tokenPath.push(nextToken)\n    }\n\n    this.pools = pools\n    this.path = tokenPath\n    this.input = input\n    this.output = output ?? tokenPath[tokenPath.length - 1]\n  }\n\n  public get chainId(): number {\n    return this.pools[0].chainId\n  }\n\n  /**\n   * Returns the mid price of the route\n   */\n  public get midPrice(): Price<TInput, TOutput> {\n    if (this._midPrice !== null) return this._midPrice\n\n    const price = this.pools.slice(1).reduce(\n      ({ nextInput, price }, pool) => {\n        return nextInput.equals(pool.token0)\n          ? {\n              nextInput: pool.token1,\n              price: price.multiply(pool.token0Price),\n            }\n          : {\n              nextInput: pool.token0,\n              price: price.multiply(pool.token1Price),\n            }\n      },\n      this.pools[0].token0.equals(this.input.wrapped)\n        ? {\n            nextInput: this.pools[0].token1,\n            price: this.pools[0].token0Price,\n          }\n        : {\n            nextInput: this.pools[0].token0,\n            price: this.pools[0].token1Price,\n          }\n    ).price\n\n    return (this._midPrice = new Price(this.input, this.output, price.denominator, price.numerator))\n  }\n}\n","import { Currency, Fraction, Percent, Price, sortedInsert, CurrencyAmount, TradeType, Token } from '@mageswap/sdk-core'\nimport { Pair } from '@mageswap/v2-sdk'\nimport { BestTradeOptions, Pool } from '@mageswap/v3-sdk'\nimport invariant from 'tiny-invariant'\nimport { ONE, ZERO } from '../../constants'\nimport { MixedRouteSDK } from './route'\n\n/**\n * Trades comparator, an extension of the input output comparator that also considers other dimensions of the trade in ranking them\n * @template TInput The input token, either Ether or an ERC-20\n * @template TOutput The output token, either Ether or an ERC-20\n * @template TTradeType The trade type, either exact input or exact output\n * @param a The first trade to compare\n * @param b The second trade to compare\n * @returns A sorted ordering for two neighboring elements in a trade array\n */\nexport function tradeComparator<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\n  a: MixedRouteTrade<TInput, TOutput, TTradeType>,\n  b: MixedRouteTrade<TInput, TOutput, TTradeType>\n) {\n  // must have same input and output token for comparison\n  invariant(a.inputAmount.currency.equals(b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(a.outputAmount.currency.equals(b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      // consider the number of hops since each hop costs gas\n      const aHops = a.swaps.reduce((total, cur) => total + cur.route.path.length, 0)\n      const bHops = b.swaps.reduce((total, cur) => total + cur.route.path.length, 0)\n      return aHops - bHops\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n/**\n * Represents a trade executed against a set of routes where some percentage of the input is\n * split across each route.\n *\n * Each route has its own set of pools. Pools can not be re-used across routes.\n *\n * Does not account for slippage, i.e., changes in price environment that can occur between\n * the time the trade is submitted and when it is executed.\n * @notice This class is functionally the same as the `Trade` class in the `@mageswap/v3-sdk` package, aside from typing and some input validation.\n * @template TInput The input token, either Ether or an ERC-20\n * @template TOutput The output token, either Ether or an ERC-20\n * @template TTradeType The trade type, either exact input or exact output\n */\nexport class MixedRouteTrade<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType> {\n  /**\n   * @deprecated Deprecated in favor of 'swaps' property. If the trade consists of multiple routes\n   * this will return an error.\n   *\n   * When the trade consists of just a single route, this returns the route of the trade,\n   * i.e. which pools the trade goes through.\n   */\n  public get route(): MixedRouteSDK<TInput, TOutput> {\n    invariant(this.swaps.length == 1, 'MULTIPLE_ROUTES')\n    return this.swaps[0].route\n  }\n\n  /**\n   * The swaps of the trade, i.e. which routes and how much is swapped in each that\n   * make up the trade.\n   */\n  public readonly swaps: {\n    route: MixedRouteSDK<TInput, TOutput>\n    inputAmount: CurrencyAmount<TInput>\n    outputAmount: CurrencyAmount<TOutput>\n  }[]\n\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TTradeType\n\n  /**\n   * The cached result of the input amount computation\n   * @private\n   */\n  private _inputAmount: CurrencyAmount<TInput> | undefined\n\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public get inputAmount(): CurrencyAmount<TInput> {\n    if (this._inputAmount) {\n      return this._inputAmount\n    }\n\n    const inputCurrency = this.swaps[0].inputAmount.currency\n    const totalInputFromRoutes = this.swaps\n      .map(({ inputAmount }) => inputAmount)\n      .reduce((total, cur) => total.add(cur), CurrencyAmount.fromRawAmount(inputCurrency, 0))\n\n    this._inputAmount = totalInputFromRoutes\n    return this._inputAmount\n  }\n\n  /**\n   * The cached result of the output amount computation\n   * @private\n   */\n  private _outputAmount: CurrencyAmount<TOutput> | undefined\n\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public get outputAmount(): CurrencyAmount<TOutput> {\n    if (this._outputAmount) {\n      return this._outputAmount\n    }\n\n    const outputCurrency = this.swaps[0].outputAmount.currency\n    const totalOutputFromRoutes = this.swaps\n      .map(({ outputAmount }) => outputAmount)\n      .reduce((total, cur) => total.add(cur), CurrencyAmount.fromRawAmount(outputCurrency, 0))\n\n    this._outputAmount = totalOutputFromRoutes\n    return this._outputAmount\n  }\n\n  /**\n   * The cached result of the computed execution price\n   * @private\n   */\n  private _executionPrice: Price<TInput, TOutput> | undefined\n\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public get executionPrice(): Price<TInput, TOutput> {\n    return (\n      this._executionPrice ??\n      (this._executionPrice = new Price(\n        this.inputAmount.currency,\n        this.outputAmount.currency,\n        this.inputAmount.quotient,\n        this.outputAmount.quotient\n      ))\n    )\n  }\n\n  /**\n   * The cached result of the price impact computation\n   * @private\n   */\n  private _priceImpact: Percent | undefined\n\n  /**\n   * Returns the percent difference between the route's mid price and the price impact\n   */\n  public get priceImpact(): Percent {\n    if (this._priceImpact) {\n      return this._priceImpact\n    }\n\n    let spotOutputAmount = CurrencyAmount.fromRawAmount(this.outputAmount.currency, 0)\n    for (const { route, inputAmount } of this.swaps) {\n      const midPrice = route.midPrice\n      spotOutputAmount = spotOutputAmount.add(midPrice.quote(inputAmount))\n    }\n\n    const priceImpact = spotOutputAmount.subtract(this.outputAmount).divide(spotOutputAmount)\n    this._priceImpact = new Percent(priceImpact.numerator, priceImpact.denominator)\n\n    return this._priceImpact\n  }\n\n  /**\n   * Constructs a trade by simulating swaps through the given route\n   * @template TInput The input token, either Ether or an ERC-20.\n   * @template TOutput The output token, either Ether or an ERC-20.\n   * @template TTradeType The type of the trade, either exact in or exact out.\n   * @param route route to swap through\n   * @param amount the amount specified, either input or output, depending on tradeType\n   * @param tradeType whether the trade is an exact input or exact output swap\n   * @returns The route\n   */\n  public static async fromRoute<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\n    route: MixedRouteSDK<TInput, TOutput>,\n    amount: TTradeType extends TradeType.EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>,\n    tradeType: TTradeType\n  ): Promise<MixedRouteTrade<TInput, TOutput, TTradeType>> {\n    const amounts: CurrencyAmount<Token>[] = new Array(route.path.length)\n    let inputAmount: CurrencyAmount<TInput>\n    let outputAmount: CurrencyAmount<TOutput>\n\n    invariant(tradeType === TradeType.EXACT_INPUT, 'TRADE_TYPE')\n\n    invariant(amount.currency.equals(route.input), 'INPUT')\n    amounts[0] = amount.wrapped\n    for (let i = 0; i < route.path.length - 1; i++) {\n      const pool = route.pools[i]\n      const [outputAmount] = await pool.getOutputAmount(amounts[i])\n      amounts[i + 1] = outputAmount\n    }\n    inputAmount = CurrencyAmount.fromFractionalAmount(route.input, amount.numerator, amount.denominator)\n    outputAmount = CurrencyAmount.fromFractionalAmount(\n      route.output,\n      amounts[amounts.length - 1].numerator,\n      amounts[amounts.length - 1].denominator\n    )\n\n    return new MixedRouteTrade({\n      routes: [{ inputAmount, outputAmount, route }],\n      tradeType,\n    })\n  }\n\n  /**\n   * Constructs a trade from routes by simulating swaps\n   *\n   * @template TInput The input token, either Ether or an ERC-20.\n   * @template TOutput The output token, either Ether or an ERC-20.\n   * @template TTradeType The type of the trade, either exact in or exact out.\n   * @param routes the routes to swap through and how much of the amount should be routed through each\n   * @param tradeType whether the trade is an exact input or exact output swap\n   * @returns The trade\n   */\n  public static async fromRoutes<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\n    routes: {\n      amount: TTradeType extends TradeType.EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>\n      route: MixedRouteSDK<TInput, TOutput>\n    }[],\n    tradeType: TTradeType\n  ): Promise<MixedRouteTrade<TInput, TOutput, TTradeType>> {\n    const populatedRoutes: {\n      route: MixedRouteSDK<TInput, TOutput>\n      inputAmount: CurrencyAmount<TInput>\n      outputAmount: CurrencyAmount<TOutput>\n    }[] = []\n\n    invariant(tradeType === TradeType.EXACT_INPUT, 'TRADE_TYPE')\n\n    for (const { route, amount } of routes) {\n      const amounts: CurrencyAmount<Token>[] = new Array(route.path.length)\n      let inputAmount: CurrencyAmount<TInput>\n      let outputAmount: CurrencyAmount<TOutput>\n\n      invariant(amount.currency.equals(route.input), 'INPUT')\n      inputAmount = CurrencyAmount.fromFractionalAmount(route.input, amount.numerator, amount.denominator)\n      amounts[0] = CurrencyAmount.fromFractionalAmount(route.input.wrapped, amount.numerator, amount.denominator)\n\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pool = route.pools[i]\n        const [outputAmount] = await pool.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n      }\n\n      outputAmount = CurrencyAmount.fromFractionalAmount(\n        route.output,\n        amounts[amounts.length - 1].numerator,\n        amounts[amounts.length - 1].denominator\n      )\n\n      populatedRoutes.push({ route, inputAmount, outputAmount })\n    }\n\n    return new MixedRouteTrade({\n      routes: populatedRoutes,\n      tradeType,\n    })\n  }\n\n  /**\n   * Creates a trade without computing the result of swapping through the route. Useful when you have simulated the trade\n   * elsewhere and do not have any tick data\n   * @template TInput The input token, either Ether or an ERC-20\n   * @template TOutput The output token, either Ether or an ERC-20\n   * @template TTradeType The type of the trade, either exact in or exact out\n   * @param constructorArguments The arguments passed to the trade constructor\n   * @returns The unchecked trade\n   */\n  public static createUncheckedTrade<\n    TInput extends Currency,\n    TOutput extends Currency,\n    TTradeType extends TradeType\n  >(constructorArguments: {\n    route: MixedRouteSDK<TInput, TOutput>\n    inputAmount: CurrencyAmount<TInput>\n    outputAmount: CurrencyAmount<TOutput>\n    tradeType: TTradeType\n  }): MixedRouteTrade<TInput, TOutput, TTradeType> {\n    return new MixedRouteTrade({\n      ...constructorArguments,\n      routes: [\n        {\n          inputAmount: constructorArguments.inputAmount,\n          outputAmount: constructorArguments.outputAmount,\n          route: constructorArguments.route,\n        },\n      ],\n    })\n  }\n\n  /**\n   * Creates a trade without computing the result of swapping through the routes. Useful when you have simulated the trade\n   * elsewhere and do not have any tick data\n   * @template TInput The input token, either Ether or an ERC-20\n   * @template TOutput The output token, either Ether or an ERC-20\n   * @template TTradeType The type of the trade, either exact in or exact out\n   * @param constructorArguments The arguments passed to the trade constructor\n   * @returns The unchecked trade\n   */\n  public static createUncheckedTradeWithMultipleRoutes<\n    TInput extends Currency,\n    TOutput extends Currency,\n    TTradeType extends TradeType\n  >(constructorArguments: {\n    routes: {\n      route: MixedRouteSDK<TInput, TOutput>\n      inputAmount: CurrencyAmount<TInput>\n      outputAmount: CurrencyAmount<TOutput>\n    }[]\n    tradeType: TTradeType\n  }): MixedRouteTrade<TInput, TOutput, TTradeType> {\n    return new MixedRouteTrade(constructorArguments)\n  }\n\n  /**\n   * Construct a trade by passing in the pre-computed property values\n   * @param routes The routes through which the trade occurs\n   * @param tradeType The type of trade, exact input or exact output\n   */\n  private constructor({\n    routes,\n    tradeType,\n  }: {\n    routes: {\n      route: MixedRouteSDK<TInput, TOutput>\n      inputAmount: CurrencyAmount<TInput>\n      outputAmount: CurrencyAmount<TOutput>\n    }[]\n    tradeType: TTradeType\n  }) {\n    const inputCurrency = routes[0].inputAmount.currency\n    const outputCurrency = routes[0].outputAmount.currency\n    invariant(\n      routes.every(({ route }) => inputCurrency.wrapped.equals(route.input.wrapped)),\n      'INPUT_CURRENCY_MATCH'\n    )\n    invariant(\n      routes.every(({ route }) => outputCurrency.wrapped.equals(route.output.wrapped)),\n      'OUTPUT_CURRENCY_MATCH'\n    )\n\n    const numPools = routes.map(({ route }) => route.pools.length).reduce((total, cur) => total + cur, 0)\n    const poolAddressSet = new Set<string>()\n    for (const { route } of routes) {\n      for (const pool of route.pools) {\n        pool instanceof Pool\n          ? poolAddressSet.add(Pool.getAddress(pool.token0, pool.token1, pool.fee))\n          : poolAddressSet.add(Pair.getAddress(pool.token0, pool.token1))\n      }\n    }\n\n    invariant(numPools == poolAddressSet.size, 'POOLS_DUPLICATED')\n\n    invariant(tradeType === TradeType.EXACT_INPUT, 'TRADE_TYPE')\n\n    this.swaps = routes\n    this.tradeType = tradeType\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance The tolerance of unfavorable slippage from the execution price of this trade\n   * @returns The amount out\n   */\n  public minimumAmountOut(slippageTolerance: Percent, amountOut = this.outputAmount): CurrencyAmount<TOutput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    /// does not support exactOutput, as enforced in the constructor\n    const slippageAdjustedAmountOut = new Fraction(ONE)\n      .add(slippageTolerance)\n      .invert()\n      .multiply(amountOut.quotient).quotient\n    return CurrencyAmount.fromRawAmount(amountOut.currency, slippageAdjustedAmountOut)\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance The tolerance of unfavorable slippage from the execution price of this trade\n   * @returns The amount in\n   */\n  public maximumAmountIn(slippageTolerance: Percent, amountIn = this.inputAmount): CurrencyAmount<TInput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    return amountIn\n    /// does not support exactOutput\n  }\n\n  /**\n   * Return the execution price after accounting for slippage tolerance\n   * @param slippageTolerance the allowed tolerated slippage\n   * @returns The execution price\n   */\n  public worstExecutionPrice(slippageTolerance: Percent): Price<TInput, TOutput> {\n    return new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.maximumAmountIn(slippageTolerance).quotient,\n      this.minimumAmountOut(slippageTolerance).quotient\n    )\n  }\n\n  /**\n   * Given a list of pools, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pools the pools to consider in finding the best trade\n   * @param nextAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pool\n   * @param currentPools used in recursion; the current list of pools\n   * @param currencyAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   * @returns The exact in trade\n   */\n  public static async bestTradeExactIn<TInput extends Currency, TOutput extends Currency>(\n    pools: (Pool | Pair)[],\n    currencyAmountIn: CurrencyAmount<TInput>,\n    currencyOut: TOutput,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPools: (Pool | Pair)[] = [],\n    nextAmountIn: CurrencyAmount<Currency> = currencyAmountIn,\n    bestTrades: MixedRouteTrade<TInput, TOutput, TradeType.EXACT_INPUT>[] = []\n  ): Promise<MixedRouteTrade<TInput, TOutput, TradeType.EXACT_INPUT>[]> {\n    invariant(pools.length > 0, 'POOLS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountIn === nextAmountIn || currentPools.length > 0, 'INVALID_RECURSION')\n\n    const amountIn = nextAmountIn.wrapped\n    const tokenOut = currencyOut.wrapped\n    for (let i = 0; i < pools.length; i++) {\n      const pool = pools[i]\n      // pool irrelevant\n      if (!pool.token0.equals(amountIn.currency) && !pool.token1.equals(amountIn.currency)) continue\n      if (pool instanceof Pair) {\n        if ((pool as Pair).reserve0.equalTo(ZERO) || (pool as Pair).reserve1.equalTo(ZERO)) continue\n      }\n\n      let amountOut: CurrencyAmount<Token>\n      try {\n        ;[amountOut] = await pool.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        // @ts-ignore[2571] error is unknown\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.currency.isToken && amountOut.currency.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          await MixedRouteTrade.fromRoute(\n            new MixedRouteSDK([...currentPools, pool], currencyAmountIn.currency, currencyOut),\n            currencyAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pools.length > 1) {\n        const poolsExcludingThisPool = pools.slice(0, i).concat(pools.slice(i + 1, pools.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        await MixedRouteTrade.bestTradeExactIn(\n          poolsExcludingThisPool,\n          currencyAmountIn,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1,\n          },\n          [...currentPools, pool],\n          amountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","export enum Protocol {\n  V2 = 'V2',\n  V3 = 'V3',\n  MIXED = 'MIXED',\n}\n","// entities/route.ts\n\nimport { Route as V2RouteSDK, Pair } from '@mageswap/v2-sdk'\nimport { Route as V3RouteSDK, Pool } from '@mageswap/v3-sdk'\nimport { Protocol } from './protocol'\nimport { Currency, Price, Token } from '@mageswap/sdk-core'\nimport { MixedRouteSDK } from './mixedRoute/route'\n\nexport interface IRoute<TInput extends Currency, TOutput extends Currency, TPool extends Pool | Pair> {\n  protocol: Protocol\n  // array of pools if v3 or pairs if v2\n  pools: TPool[]\n  path: Token[]\n  midPrice: Price<TInput, TOutput>\n  input: TInput\n  output: TOutput\n}\n\n// V2 route wrapper\nexport class RouteV2<TInput extends Currency, TOutput extends Currency>\n  extends V2RouteSDK<TInput, TOutput>\n  implements IRoute<TInput, TOutput, Pair>\n{\n  public readonly protocol: Protocol = Protocol.V2\n  public readonly pools: Pair[]\n\n  constructor(v2Route: V2RouteSDK<TInput, TOutput>) {\n    super(v2Route.pairs, v2Route.input, v2Route.output)\n    this.pools = this.pairs\n  }\n}\n\n// V3 route wrapper\nexport class RouteV3<TInput extends Currency, TOutput extends Currency>\n  extends V3RouteSDK<TInput, TOutput>\n  implements IRoute<TInput, TOutput, Pool>\n{\n  public readonly protocol: Protocol = Protocol.V3\n  public readonly path: Token[]\n\n  constructor(v3Route: V3RouteSDK<TInput, TOutput>) {\n    super(v3Route.pools, v3Route.input, v3Route.output)\n    this.path = v3Route.tokenPath\n  }\n}\n\n// Mixed route wrapper\nexport class MixedRoute<TInput extends Currency, TOutput extends Currency>\n  extends MixedRouteSDK<TInput, TOutput>\n  implements IRoute<TInput, TOutput, Pool | Pair>\n{\n  public readonly protocol: Protocol = Protocol.MIXED\n\n  constructor(mixedRoute: MixedRouteSDK<TInput, TOutput>) {\n    super(mixedRoute.pools, mixedRoute.input, mixedRoute.output)\n  }\n}\n","import { Currency, CurrencyAmount, Fraction, Percent, Price, TradeType } from '@mageswap/sdk-core'\nimport { Pair, Route as V2RouteSDK, Trade as V2TradeSDK } from '@mageswap/v2-sdk'\nimport { Pool, Route as V3RouteSDK, Trade as V3TradeSDK } from '@mageswap/v3-sdk'\nimport invariant from 'tiny-invariant'\nimport { ONE, ZERO } from '../constants'\nimport { MixedRouteSDK } from './mixedRoute/route'\nimport { MixedRouteTrade as MixedRouteTradeSDK } from './mixedRoute/trade'\nimport { IRoute, MixedRoute, RouteV2, RouteV3 } from './route'\n\nexport class Trade<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType> {\n  public readonly routes: IRoute<TInput, TOutput, Pair | Pool>[]\n  public readonly tradeType: TTradeType\n  private _outputAmount: CurrencyAmount<TOutput> | undefined\n  private _inputAmount: CurrencyAmount<TInput> | undefined\n\n  /**\n   * The swaps of the trade, i.e. which routes and how much is swapped in each that\n   * make up the trade. May consist of swaps in v2 or v3.\n   */\n  public readonly swaps: {\n    route: IRoute<TInput, TOutput, Pair | Pool>\n    inputAmount: CurrencyAmount<TInput>\n    outputAmount: CurrencyAmount<TOutput>\n  }[]\n\n  //  construct a trade across v2 and v3 routes from pre-computed amounts\n  public constructor({\n    v2Routes,\n    v3Routes,\n    tradeType,\n    mixedRoutes,\n  }: {\n    v2Routes: {\n      routev2: V2RouteSDK<TInput, TOutput>\n      inputAmount: CurrencyAmount<TInput>\n      outputAmount: CurrencyAmount<TOutput>\n    }[]\n    v3Routes: {\n      routev3: V3RouteSDK<TInput, TOutput>\n      inputAmount: CurrencyAmount<TInput>\n      outputAmount: CurrencyAmount<TOutput>\n    }[]\n    tradeType: TTradeType\n    mixedRoutes?: {\n      mixedRoute: MixedRouteSDK<TInput, TOutput>\n      inputAmount: CurrencyAmount<TInput>\n      outputAmount: CurrencyAmount<TOutput>\n    }[]\n  }) {\n    this.swaps = []\n    this.routes = []\n    // wrap v2 routes\n    for (const { routev2, inputAmount, outputAmount } of v2Routes) {\n      const route = new RouteV2(routev2)\n      this.routes.push(route)\n      this.swaps.push({\n        route,\n        inputAmount,\n        outputAmount,\n      })\n    }\n    // wrap v3 routes\n    for (const { routev3, inputAmount, outputAmount } of v3Routes) {\n      const route = new RouteV3(routev3)\n      this.routes.push(route)\n      this.swaps.push({\n        route,\n        inputAmount,\n        outputAmount,\n      })\n    }\n    // wrap mixedRoutes\n    if (mixedRoutes) {\n      for (const { mixedRoute, inputAmount, outputAmount } of mixedRoutes) {\n        const route = new MixedRoute(mixedRoute)\n        this.routes.push(route)\n        this.swaps.push({\n          route,\n          inputAmount,\n          outputAmount,\n        })\n      }\n    }\n    this.tradeType = tradeType\n\n    // each route must have the same input and output currency\n    const inputCurrency = this.swaps[0].inputAmount.currency\n    const outputCurrency = this.swaps[0].outputAmount.currency\n    invariant(\n      this.swaps.every(({ route }) => inputCurrency.wrapped.equals(route.input.wrapped)),\n      'INPUT_CURRENCY_MATCH'\n    )\n    invariant(\n      this.swaps.every(({ route }) => outputCurrency.wrapped.equals(route.output.wrapped)),\n      'OUTPUT_CURRENCY_MATCH'\n    )\n\n    // pools must be unique inter protocols\n    const numPools = this.swaps.map(({ route }) => route.pools.length).reduce((total, cur) => total + cur, 0)\n    const poolAddressSet = new Set<string>()\n    for (const { route } of this.swaps) {\n      for (const pool of route.pools) {\n        if (pool instanceof Pool) {\n          poolAddressSet.add(Pool.getAddress(pool.token0, pool.token1, (pool as Pool).fee))\n        } else if (pool instanceof Pair) {\n          const pair = pool\n          poolAddressSet.add(Pair.getAddress(pair.token0, pair.token1))\n        } else {\n          throw new Error('Unexpected pool type in route when constructing trade object')\n        }\n      }\n    }\n    invariant(numPools == poolAddressSet.size, 'POOLS_DUPLICATED')\n  }\n\n  public get inputAmount(): CurrencyAmount<TInput> {\n    if (this._inputAmount) {\n      return this._inputAmount\n    }\n\n    const inputCurrency = this.swaps[0].inputAmount.currency\n    const totalInputFromRoutes = this.swaps\n      .map(({ inputAmount }) => inputAmount)\n      .reduce((total, cur) => total.add(cur), CurrencyAmount.fromRawAmount(inputCurrency, 0))\n\n    this._inputAmount = totalInputFromRoutes\n    return this._inputAmount\n  }\n\n  public get outputAmount(): CurrencyAmount<TOutput> {\n    if (this._outputAmount) {\n      return this._outputAmount\n    }\n\n    const outputCurrency = this.swaps[0].outputAmount.currency\n    const totalOutputFromRoutes = this.swaps\n      .map(({ outputAmount }) => outputAmount)\n      .reduce((total, cur) => total.add(cur), CurrencyAmount.fromRawAmount(outputCurrency, 0))\n\n    this._outputAmount = totalOutputFromRoutes\n    return this._outputAmount\n  }\n\n  private _executionPrice: Price<TInput, TOutput> | undefined\n\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public get executionPrice(): Price<TInput, TOutput> {\n    return (\n      this._executionPrice ??\n      (this._executionPrice = new Price(\n        this.inputAmount.currency,\n        this.outputAmount.currency,\n        this.inputAmount.quotient,\n        this.outputAmount.quotient\n      ))\n    )\n  }\n\n  /**\n   * The cached result of the price impact computation\n   * @private\n   */\n  private _priceImpact: Percent | undefined\n  /**\n   * Returns the percent difference between the route's mid price and the price impact\n   */\n  public get priceImpact(): Percent {\n    if (this._priceImpact) {\n      return this._priceImpact\n    }\n\n    let spotOutputAmount = CurrencyAmount.fromRawAmount(this.outputAmount.currency, 0)\n    for (const { route, inputAmount } of this.swaps) {\n      const midPrice = route.midPrice\n      spotOutputAmount = spotOutputAmount.add(midPrice.quote(inputAmount))\n    }\n\n    const priceImpact = spotOutputAmount.subtract(this.outputAmount).divide(spotOutputAmount)\n    this._priceImpact = new Percent(priceImpact.numerator, priceImpact.denominator)\n\n    return this._priceImpact\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance The tolerance of unfavorable slippage from the execution price of this trade\n   * @returns The amount out\n   */\n  public minimumAmountOut(slippageTolerance: Percent, amountOut = this.outputAmount): CurrencyAmount<TOutput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return amountOut\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(amountOut.quotient).quotient\n      return CurrencyAmount.fromRawAmount(amountOut.currency, slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance The tolerance of unfavorable slippage from the execution price of this trade\n   * @returns The amount in\n   */\n  public maximumAmountIn(slippageTolerance: Percent, amountIn = this.inputAmount): CurrencyAmount<TInput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return amountIn\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(amountIn.quotient).quotient\n      return CurrencyAmount.fromRawAmount(amountIn.currency, slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Return the execution price after accounting for slippage tolerance\n   * @param slippageTolerance the allowed tolerated slippage\n   * @returns The execution price\n   */\n  public worstExecutionPrice(slippageTolerance: Percent): Price<TInput, TOutput> {\n    return new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.maximumAmountIn(slippageTolerance).quotient,\n      this.minimumAmountOut(slippageTolerance).quotient\n    )\n  }\n\n  public static async fromRoutes<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\n    v2Routes: {\n      routev2: V2RouteSDK<TInput, TOutput>\n      amount: TTradeType extends TradeType.EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>\n    }[],\n    v3Routes: {\n      routev3: V3RouteSDK<TInput, TOutput>\n      amount: TTradeType extends TradeType.EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>\n    }[],\n    tradeType: TTradeType,\n    mixedRoutes?: {\n      mixedRoute: MixedRouteSDK<TInput, TOutput>\n      amount: TTradeType extends TradeType.EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>\n    }[]\n  ): Promise<Trade<TInput, TOutput, TTradeType>> {\n    const populatedV2Routes: {\n      routev2: V2RouteSDK<TInput, TOutput>\n      inputAmount: CurrencyAmount<TInput>\n      outputAmount: CurrencyAmount<TOutput>\n    }[] = []\n\n    const populatedV3Routes: {\n      routev3: V3RouteSDK<TInput, TOutput>\n      inputAmount: CurrencyAmount<TInput>\n      outputAmount: CurrencyAmount<TOutput>\n    }[] = []\n\n    const populatedMixedRoutes: {\n      mixedRoute: MixedRouteSDK<TInput, TOutput>\n      inputAmount: CurrencyAmount<TInput>\n      outputAmount: CurrencyAmount<TOutput>\n    }[] = []\n\n    for (const { routev2, amount } of v2Routes) {\n      const v2Trade = new V2TradeSDK(routev2, amount, tradeType)\n      const { inputAmount, outputAmount } = v2Trade\n\n      populatedV2Routes.push({\n        routev2,\n        inputAmount,\n        outputAmount,\n      })\n    }\n\n    for (const { routev3, amount } of v3Routes) {\n      const v3Trade = await V3TradeSDK.fromRoute(routev3, amount, tradeType)\n      const { inputAmount, outputAmount } = v3Trade\n\n      populatedV3Routes.push({\n        routev3,\n        inputAmount,\n        outputAmount,\n      })\n    }\n\n    if (mixedRoutes) {\n      for (const { mixedRoute, amount } of mixedRoutes) {\n        const mixedRouteTrade = await MixedRouteTradeSDK.fromRoute(mixedRoute, amount, tradeType)\n        const { inputAmount, outputAmount } = mixedRouteTrade\n\n        populatedMixedRoutes.push({\n          mixedRoute,\n          inputAmount,\n          outputAmount,\n        })\n      }\n    }\n\n    return new Trade({\n      v2Routes: populatedV2Routes,\n      v3Routes: populatedV3Routes,\n      mixedRoutes: populatedMixedRoutes,\n      tradeType,\n    })\n  }\n\n  public static async fromRoute<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\n    route: V2RouteSDK<TInput, TOutput> | V3RouteSDK<TInput, TOutput> | MixedRouteSDK<TInput, TOutput>,\n    amount: TTradeType extends TradeType.EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>,\n    tradeType: TTradeType\n  ): Promise<Trade<TInput, TOutput, TTradeType>> {\n    let v2Routes: {\n      routev2: V2RouteSDK<TInput, TOutput>\n      inputAmount: CurrencyAmount<TInput>\n      outputAmount: CurrencyAmount<TOutput>\n    }[] = []\n\n    let v3Routes: {\n      routev3: V3RouteSDK<TInput, TOutput>\n      inputAmount: CurrencyAmount<TInput>\n      outputAmount: CurrencyAmount<TOutput>\n    }[] = []\n\n    let mixedRoutes: {\n      mixedRoute: MixedRouteSDK<TInput, TOutput>\n      inputAmount: CurrencyAmount<TInput>\n      outputAmount: CurrencyAmount<TOutput>\n    }[] = []\n\n    if (route instanceof V2RouteSDK) {\n      const v2Trade = new V2TradeSDK(route, amount, tradeType)\n      const { inputAmount, outputAmount } = v2Trade\n      v2Routes = [{ routev2: route, inputAmount, outputAmount }]\n    } else if (route instanceof V3RouteSDK) {\n      const v3Trade = await V3TradeSDK.fromRoute(route, amount, tradeType)\n      const { inputAmount, outputAmount } = v3Trade\n      v3Routes = [{ routev3: route, inputAmount, outputAmount }]\n    } else if (route instanceof MixedRouteSDK) {\n      const mixedRouteTrade = await MixedRouteTradeSDK.fromRoute(route, amount, tradeType)\n      const { inputAmount, outputAmount } = mixedRouteTrade\n      mixedRoutes = [{ mixedRoute: route, inputAmount, outputAmount }]\n    } else {\n      throw new Error('Invalid route type')\n    }\n\n    return new Trade({\n      v2Routes,\n      v3Routes,\n      mixedRoutes,\n      tradeType,\n    })\n  }\n}\n","import { pack } from '@ethersproject/solidity'\nimport { Currency, Token } from '@mageswap/sdk-core'\nimport { Pool } from '@mageswap/v3-sdk'\nimport { Pair } from '@mageswap/v2-sdk'\nimport { MixedRouteSDK } from '../entities/mixedRoute/route'\nimport { V2_FEE_PATH_PLACEHOLDER } from '../constants'\n\n/**\n * Converts a route to a hex encoded path\n * @notice only supports exactIn route encodings\n * @param route the mixed path to convert to an encoded path\n * @returns the exactIn encoded path\n */\nexport function encodeMixedRouteToPath(route: MixedRouteSDK<Currency, Currency>): string {\n  const firstInputToken: Token = route.input.wrapped\n\n  const { path, types } = route.pools.reduce(\n    (\n      { inputToken, path, types }: { inputToken: Token; path: (string | number)[]; types: string[] },\n      pool: Pool | Pair,\n      index\n    ): { inputToken: Token; path: (string | number)[]; types: string[] } => {\n      const outputToken: Token = pool.token0.equals(inputToken) ? pool.token1 : pool.token0\n      if (index === 0) {\n        return {\n          inputToken: outputToken,\n          types: ['address', 'uint24', 'address'],\n          path: [inputToken.address, pool instanceof Pool ? pool.fee : V2_FEE_PATH_PLACEHOLDER, outputToken.address],\n        }\n      } else {\n        return {\n          inputToken: outputToken,\n          types: [...types, 'uint24', 'address'],\n          path: [...path, pool instanceof Pool ? pool.fee : V2_FEE_PATH_PLACEHOLDER, outputToken.address],\n        }\n      }\n    },\n    { inputToken: firstInputToken, path: [], types: [] }\n  )\n\n  return pack(types, path)\n}\n","import { Currency, Token } from '@mageswap/sdk-core'\nimport { Pair } from '@mageswap/v2-sdk'\nimport { Pool } from '@mageswap/v3-sdk'\nimport { MixedRouteSDK } from '../entities/mixedRoute/route'\n\n/**\n * Utility function to return each consecutive section of Pools or Pairs in a MixedRoute\n * @param route\n * @returns a nested array of Pools or Pairs in the order of the route\n */\nexport const partitionMixedRouteByProtocol = (route: MixedRouteSDK<Currency, Currency>): (Pool | Pair)[][] => {\n  let acc = []\n\n  let left = 0\n  let right = 0\n  while (right < route.pools.length) {\n    if (\n      (route.pools[left] instanceof Pool && route.pools[right] instanceof Pair) ||\n      (route.pools[left] instanceof Pair && route.pools[right] instanceof Pool)\n    ) {\n      acc.push(route.pools.slice(left, right))\n      left = right\n    }\n    // seek forward with right pointer\n    right++\n    if (right === route.pools.length) {\n      /// we reached the end, take the rest\n      acc.push(route.pools.slice(left, right))\n    }\n  }\n  return acc\n}\n\n/**\n * Simple utility function to get the output of an array of Pools or Pairs\n * @param pools\n * @param firstInputToken\n * @returns the output token of the last pool in the array\n */\nexport const getOutputOfPools = (pools: (Pool | Pair)[], firstInputToken: Token): Token => {\n  const { inputToken: outputToken } = pools.reduce(\n    ({ inputToken }, pool: Pool | Pair): { inputToken: Token } => {\n      if (!pool.involvesToken(inputToken)) throw new Error('PATH')\n      const outputToken: Token = pool.token0.equals(inputToken) ? pool.token1 : pool.token0\n      return {\n        inputToken: outputToken,\n      }\n    },\n    { inputToken: firstInputToken }\n  )\n  return outputToken\n}\n","import { Interface } from '@ethersproject/abi'\nimport { Currency, CurrencyAmount, Percent, TradeType, validateAndParseAddress, WETH9 } from '@mageswap/sdk-core'\nimport { abi } from '@mageswap/swap-router-contracts/artifacts/contracts/interfaces/ISwapRouter02.sol/ISwapRouter02.json'\nimport { Trade as V2Trade } from '@mageswap/v2-sdk'\nimport {\n  encodeRouteToPath,\n  FeeOptions,\n  MethodParameters,\n  Payments,\n  PermitOptions,\n  Pool,\n  Position,\n  SelfPermit,\n  toHex,\n  Trade as V3Trade,\n} from '@mageswap/v3-sdk'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { ADDRESS_THIS, MSG_SENDER } from './constants'\nimport { ApproveAndCall, ApprovalTypes, CondensedAddLiquidityOptions } from './approveAndCall'\nimport { Trade } from './entities/trade'\nimport { Protocol } from './entities/protocol'\nimport { MixedRoute, RouteV2, RouteV3 } from './entities/route'\nimport { MulticallExtended, Validation } from './multicallExtended'\nimport { PaymentsExtended } from './paymentsExtended'\nimport { MixedRouteTrade } from './entities/mixedRoute/trade'\nimport { encodeMixedRouteToPath } from './utils/encodeMixedRouteToPath'\nimport { MixedRouteSDK } from './entities/mixedRoute/route'\nimport { partitionMixedRouteByProtocol, getOutputOfPools } from './utils'\n\nconst ZERO = JSBI.BigInt(0)\nconst REFUND_ETH_PRICE_IMPACT_THRESHOLD = new Percent(JSBI.BigInt(50), JSBI.BigInt(100))\n\n/**\n * Options for producing the arguments to send calls to the router.\n */\nexport interface SwapOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  slippageTolerance: Percent\n\n  /**\n   * The account that should receive the output. If omitted, output is sent to msg.sender.\n   */\n  recipient?: string\n\n  /**\n   * Either deadline (when the transaction expires, in epoch seconds), or previousBlockhash.\n   */\n  deadlineOrPreviousBlockhash?: Validation\n\n  /**\n   * The optional permit parameters for spending the input.\n   */\n  inputTokenPermit?: PermitOptions\n\n  /**\n   * Optional information for taking a fee on output.\n   */\n  fee?: FeeOptions\n}\n\nexport interface SwapAndAddOptions extends SwapOptions {\n  /**\n   * The optional permit parameters for pulling in remaining output token.\n   */\n  outputTokenPermit?: PermitOptions\n}\n\ntype AnyTradeType =\n  | Trade<Currency, Currency, TradeType>\n  | V2Trade<Currency, Currency, TradeType>\n  | V3Trade<Currency, Currency, TradeType>\n  | MixedRouteTrade<Currency, Currency, TradeType>\n  | (\n      | V2Trade<Currency, Currency, TradeType>\n      | V3Trade<Currency, Currency, TradeType>\n      | MixedRouteTrade<Currency, Currency, TradeType>\n    )[]\n\n/**\n * Represents the Uniswap V2 + V3 SwapRouter02, and has static methods for helping execute trades.\n */\nexport abstract class SwapRouter {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * @notice Generates the calldata for a Swap with a V2 Route.\n   * @param trade The V2Trade to encode.\n   * @param options SwapOptions to use for the trade.\n   * @param routerMustCustody Flag for whether funds should be sent to the router\n   * @param performAggregatedSlippageCheck Flag for whether we want to perform an aggregated slippage check\n   * @returns A string array of calldatas for the trade.\n   */\n  private static encodeV2Swap(\n    trade: V2Trade<Currency, Currency, TradeType>,\n    options: SwapOptions,\n    routerMustCustody: boolean,\n    performAggregatedSlippageCheck: boolean\n  ): string {\n    const amountIn: string = toHex(trade.maximumAmountIn(options.slippageTolerance).quotient)\n    const amountOut: string = toHex(trade.minimumAmountOut(options.slippageTolerance).quotient)\n\n    const path = trade.route.path.map((token) => token.address)\n    const recipient = routerMustCustody\n      ? ADDRESS_THIS\n      : typeof options.recipient === 'undefined'\n      ? MSG_SENDER\n      : validateAndParseAddress(options.recipient)\n\n    if (trade.tradeType === TradeType.EXACT_INPUT) {\n      const exactInputParams = [amountIn, performAggregatedSlippageCheck ? 0 : amountOut, path, recipient]\n\n      return SwapRouter.INTERFACE.encodeFunctionData('swapExactTokensForTokens', exactInputParams)\n    } else {\n      const exactOutputParams = [amountOut, amountIn, path, recipient]\n\n      return SwapRouter.INTERFACE.encodeFunctionData('swapTokensForExactTokens', exactOutputParams)\n    }\n  }\n\n  /**\n   * @notice Generates the calldata for a Swap with a V3 Route.\n   * @param trade The V3Trade to encode.\n   * @param options SwapOptions to use for the trade.\n   * @param routerMustCustody Flag for whether funds should be sent to the router\n   * @param performAggregatedSlippageCheck Flag for whether we want to perform an aggregated slippage check\n   * @returns A string array of calldatas for the trade.\n   */\n  private static encodeV3Swap(\n    trade: V3Trade<Currency, Currency, TradeType>,\n    options: SwapOptions,\n    routerMustCustody: boolean,\n    performAggregatedSlippageCheck: boolean\n  ): string[] {\n    const calldatas: string[] = []\n\n    for (const { route, inputAmount, outputAmount } of trade.swaps) {\n      const amountIn: string = toHex(trade.maximumAmountIn(options.slippageTolerance, inputAmount).quotient)\n      const amountOut: string = toHex(trade.minimumAmountOut(options.slippageTolerance, outputAmount).quotient)\n\n      // flag for whether the trade is single hop or not\n      const singleHop = route.pools.length === 1\n\n      const recipient = routerMustCustody\n        ? ADDRESS_THIS\n        : typeof options.recipient === 'undefined'\n        ? MSG_SENDER\n        : validateAndParseAddress(options.recipient)\n\n      if (singleHop) {\n        if (trade.tradeType === TradeType.EXACT_INPUT) {\n          const exactInputSingleParams = {\n            tokenIn: route.tokenPath[0].address,\n            tokenOut: route.tokenPath[1].address,\n            fee: route.pools[0].fee,\n            recipient,\n            amountIn,\n            amountOutMinimum: performAggregatedSlippageCheck ? 0 : amountOut,\n            sqrtPriceLimitX96: 0,\n          }\n\n          calldatas.push(SwapRouter.INTERFACE.encodeFunctionData('exactInputSingle', [exactInputSingleParams]))\n        } else {\n          const exactOutputSingleParams = {\n            tokenIn: route.tokenPath[0].address,\n            tokenOut: route.tokenPath[1].address,\n            fee: route.pools[0].fee,\n            recipient,\n            amountOut,\n            amountInMaximum: amountIn,\n            sqrtPriceLimitX96: 0,\n          }\n\n          calldatas.push(SwapRouter.INTERFACE.encodeFunctionData('exactOutputSingle', [exactOutputSingleParams]))\n        }\n      } else {\n        const path: string = encodeRouteToPath(route, trade.tradeType === TradeType.EXACT_OUTPUT)\n\n        if (trade.tradeType === TradeType.EXACT_INPUT) {\n          const exactInputParams = {\n            path,\n            recipient,\n            amountIn,\n            amountOutMinimum: performAggregatedSlippageCheck ? 0 : amountOut,\n          }\n\n          calldatas.push(SwapRouter.INTERFACE.encodeFunctionData('exactInput', [exactInputParams]))\n        } else {\n          const exactOutputParams = {\n            path,\n            recipient,\n            amountOut,\n            amountInMaximum: amountIn,\n          }\n\n          calldatas.push(SwapRouter.INTERFACE.encodeFunctionData('exactOutput', [exactOutputParams]))\n        }\n      }\n    }\n\n    return calldatas\n  }\n\n  /**\n   * @notice Generates the calldata for a MixedRouteSwap. Since single hop routes are not MixedRoutes, we will instead generate\n   *         them via the existing encodeV3Swap and encodeV2Swap methods.\n   * @param trade The MixedRouteTrade to encode.\n   * @param options SwapOptions to use for the trade.\n   * @param routerMustCustody Flag for whether funds should be sent to the router\n   * @param performAggregatedSlippageCheck Flag for whether we want to perform an aggregated slippage check\n   * @returns A string array of calldatas for the trade.\n   */\n  private static encodeMixedRouteSwap(\n    trade: MixedRouteTrade<Currency, Currency, TradeType>,\n    options: SwapOptions,\n    routerMustCustody: boolean,\n    performAggregatedSlippageCheck: boolean\n  ): string[] {\n    const calldatas: string[] = []\n\n    invariant(trade.tradeType === TradeType.EXACT_INPUT, 'TRADE_TYPE')\n\n    for (const { route, inputAmount, outputAmount } of trade.swaps) {\n      const amountIn: string = toHex(trade.maximumAmountIn(options.slippageTolerance, inputAmount).quotient)\n      const amountOut: string = toHex(trade.minimumAmountOut(options.slippageTolerance, outputAmount).quotient)\n\n      // flag for whether the trade is single hop or not\n      const singleHop = route.pools.length === 1\n\n      const recipient = routerMustCustody\n        ? ADDRESS_THIS\n        : typeof options.recipient === 'undefined'\n        ? MSG_SENDER\n        : validateAndParseAddress(options.recipient)\n\n      const mixedRouteIsAllV3 = (route: MixedRouteSDK<Currency, Currency>) => {\n        return route.pools.every((pool) => pool instanceof Pool)\n      }\n\n      if (singleHop) {\n        /// For single hop, since it isn't really a mixedRoute, we'll just mimic behavior of V3 or V2\n        /// We don't use encodeV3Swap() or encodeV2Swap() because casting the trade to a V3Trade or V2Trade is overcomplex\n        if (mixedRouteIsAllV3(route)) {\n          const exactInputSingleParams = {\n            tokenIn: route.path[0].address,\n            tokenOut: route.path[1].address,\n            fee: (route.pools as Pool[])[0].fee,\n            recipient,\n            amountIn,\n            amountOutMinimum: performAggregatedSlippageCheck ? 0 : amountOut,\n            sqrtPriceLimitX96: 0,\n          }\n\n          calldatas.push(SwapRouter.INTERFACE.encodeFunctionData('exactInputSingle', [exactInputSingleParams]))\n        } else {\n          const path = route.path.map((token) => token.address)\n\n          const exactInputParams = [amountIn, performAggregatedSlippageCheck ? 0 : amountOut, path, recipient]\n\n          calldatas.push(SwapRouter.INTERFACE.encodeFunctionData('swapExactTokensForTokens', exactInputParams))\n        }\n      } else {\n        const sections = partitionMixedRouteByProtocol(route)\n\n        const isLastSectionInRoute = (i: number) => {\n          return i === sections.length - 1\n        }\n\n        let outputToken\n        let inputToken = route.input.wrapped\n\n        for (let i = 0; i < sections.length; i++) {\n          const section = sections[i]\n          /// Now, we get output of this section\n          outputToken = getOutputOfPools(section, inputToken)\n\n          const newRouteOriginal = new MixedRouteSDK(\n            [...section],\n            section[0].token0.equals(inputToken) ? section[0].token0 : section[0].token1,\n            outputToken\n          )\n          const newRoute = new MixedRoute(newRouteOriginal)\n\n          /// Previous output is now input\n          inputToken = outputToken\n\n          if (mixedRouteIsAllV3(newRoute)) {\n            const path: string = encodeMixedRouteToPath(newRoute)\n            const exactInputParams = {\n              path,\n              // By default router holds funds until the last swap, then it is sent to the recipient\n              // special case exists where we are unwrapping WETH output, in which case `routerMustCustody` is set to true\n              // and router still holds the funds. That logic bundled into how the value of `recipient` is calculated\n              recipient: isLastSectionInRoute(i) ? recipient : ADDRESS_THIS,\n              amountIn: i == 0 ? amountIn : 0,\n              amountOutMinimum: !isLastSectionInRoute(i) ? 0 : amountOut,\n            }\n\n            calldatas.push(SwapRouter.INTERFACE.encodeFunctionData('exactInput', [exactInputParams]))\n          } else {\n            const exactInputParams = [\n              i == 0 ? amountIn : 0, // amountIn\n              !isLastSectionInRoute(i) ? 0 : amountOut, // amountOutMin\n              newRoute.path.map((token) => token.address), // path\n              isLastSectionInRoute(i) ? recipient : ADDRESS_THIS, // to\n            ]\n\n            calldatas.push(SwapRouter.INTERFACE.encodeFunctionData('swapExactTokensForTokens', exactInputParams))\n          }\n        }\n      }\n    }\n\n    return calldatas\n  }\n\n  private static encodeSwaps(\n    trades: AnyTradeType,\n    options: SwapOptions,\n    isSwapAndAdd?: boolean\n  ): {\n    calldatas: string[]\n    sampleTrade:\n      | V2Trade<Currency, Currency, TradeType>\n      | V3Trade<Currency, Currency, TradeType>\n      | MixedRouteTrade<Currency, Currency, TradeType>\n    routerMustCustody: boolean\n    inputIsNative: boolean\n    outputIsNative: boolean\n    totalAmountIn: CurrencyAmount<Currency>\n    minimumAmountOut: CurrencyAmount<Currency>\n    quoteAmountOut: CurrencyAmount<Currency>\n  } {\n    // If dealing with an instance of the aggregated Trade object, unbundle it to individual trade objects.\n    if (trades instanceof Trade) {\n      invariant(\n        trades.swaps.every(\n          (swap) =>\n            swap.route.protocol == Protocol.V3 ||\n            swap.route.protocol == Protocol.V2 ||\n            swap.route.protocol == Protocol.MIXED\n        ),\n        'UNSUPPORTED_PROTOCOL'\n      )\n\n      let individualTrades: (\n        | V2Trade<Currency, Currency, TradeType>\n        | V3Trade<Currency, Currency, TradeType>\n        | MixedRouteTrade<Currency, Currency, TradeType>\n      )[] = []\n\n      for (const { route, inputAmount, outputAmount } of trades.swaps) {\n        if (route.protocol == Protocol.V2) {\n          individualTrades.push(\n            new V2Trade(\n              route as RouteV2<Currency, Currency>,\n              trades.tradeType == TradeType.EXACT_INPUT ? inputAmount : outputAmount,\n              trades.tradeType\n            )\n          )\n        } else if (route.protocol == Protocol.V3) {\n          individualTrades.push(\n            V3Trade.createUncheckedTrade({\n              route: route as RouteV3<Currency, Currency>,\n              inputAmount,\n              outputAmount,\n              tradeType: trades.tradeType,\n            })\n          )\n        } else if (route.protocol == Protocol.MIXED) {\n          individualTrades.push(\n            /// we can change the naming of this function on MixedRouteTrade if needed\n            MixedRouteTrade.createUncheckedTrade({\n              route: route as MixedRoute<Currency, Currency>,\n              inputAmount,\n              outputAmount,\n              tradeType: trades.tradeType,\n            })\n          )\n        } else {\n          throw new Error('UNSUPPORTED_TRADE_PROTOCOL')\n        }\n      }\n      trades = individualTrades\n    }\n\n    if (!Array.isArray(trades)) {\n      trades = [trades]\n    }\n\n    const numberOfTrades = trades.reduce(\n      (numberOfTrades, trade) =>\n        numberOfTrades + (trade instanceof V3Trade || trade instanceof MixedRouteTrade ? trade.swaps.length : 1),\n      0\n    )\n\n    const sampleTrade = trades[0]\n\n    // All trades should have the same starting/ending currency and trade type\n    invariant(\n      trades.every((trade) => trade.inputAmount.currency.equals(sampleTrade.inputAmount.currency)),\n      'TOKEN_IN_DIFF'\n    )\n    invariant(\n      trades.every((trade) => trade.outputAmount.currency.equals(sampleTrade.outputAmount.currency)),\n      'TOKEN_OUT_DIFF'\n    )\n    invariant(\n      trades.every((trade) => trade.tradeType === sampleTrade.tradeType),\n      'TRADE_TYPE_DIFF'\n    )\n\n    const calldatas: string[] = []\n\n    const inputIsNative = sampleTrade.inputAmount.currency.isNative\n    const outputIsNative = sampleTrade.outputAmount.currency.isNative\n\n    // flag for whether we want to perform an aggregated slippage check\n    //   1. when there are >2 exact input trades. this is only a heuristic,\n    //      as it's still more gas-expensive even in this case, but has benefits\n    //      in that the reversion probability is lower\n    const performAggregatedSlippageCheck = sampleTrade.tradeType === TradeType.EXACT_INPUT && numberOfTrades > 2\n    // flag for whether funds should be send first to the router\n    //   1. when receiving ETH (which much be unwrapped from WETH)\n    //   2. when a fee on the output is being taken\n    //   3. when performing swap and add\n    //   4. when performing an aggregated slippage check\n    const routerMustCustody = outputIsNative || !!options.fee || !!isSwapAndAdd || performAggregatedSlippageCheck\n\n    // encode permit if necessary\n    if (options.inputTokenPermit) {\n      invariant(sampleTrade.inputAmount.currency.isToken, 'NON_TOKEN_PERMIT')\n      calldatas.push(SelfPermit.encodePermit(sampleTrade.inputAmount.currency, options.inputTokenPermit))\n    }\n\n    for (const trade of trades) {\n      if (trade instanceof V2Trade) {\n        calldatas.push(SwapRouter.encodeV2Swap(trade, options, routerMustCustody, performAggregatedSlippageCheck))\n      } else if (trade instanceof V3Trade) {\n        for (const calldata of SwapRouter.encodeV3Swap(\n          trade,\n          options,\n          routerMustCustody,\n          performAggregatedSlippageCheck\n        )) {\n          calldatas.push(calldata)\n        }\n      } else if (trade instanceof MixedRouteTrade) {\n        for (const calldata of SwapRouter.encodeMixedRouteSwap(\n          trade,\n          options,\n          routerMustCustody,\n          performAggregatedSlippageCheck\n        )) {\n          calldatas.push(calldata)\n        }\n      } else {\n        throw new Error('Unsupported trade object')\n      }\n    }\n\n    const ZERO_IN: CurrencyAmount<Currency> = CurrencyAmount.fromRawAmount(sampleTrade.inputAmount.currency, 0)\n    const ZERO_OUT: CurrencyAmount<Currency> = CurrencyAmount.fromRawAmount(sampleTrade.outputAmount.currency, 0)\n\n    const minimumAmountOut: CurrencyAmount<Currency> = trades.reduce(\n      (sum, trade) => sum.add(trade.minimumAmountOut(options.slippageTolerance)),\n      ZERO_OUT\n    )\n\n    const quoteAmountOut: CurrencyAmount<Currency> = trades.reduce(\n      (sum, trade) => sum.add(trade.outputAmount),\n      ZERO_OUT\n    )\n\n    const totalAmountIn: CurrencyAmount<Currency> = trades.reduce(\n      (sum, trade) => sum.add(trade.maximumAmountIn(options.slippageTolerance)),\n      ZERO_IN\n    )\n\n    return {\n      calldatas,\n      sampleTrade,\n      routerMustCustody,\n      inputIsNative,\n      outputIsNative,\n      totalAmountIn,\n      minimumAmountOut,\n      quoteAmountOut,\n    }\n  }\n\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trades to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(\n    trades:\n      | Trade<Currency, Currency, TradeType>\n      | V2Trade<Currency, Currency, TradeType>\n      | V3Trade<Currency, Currency, TradeType>\n      | MixedRouteTrade<Currency, Currency, TradeType>\n      | (\n          | V2Trade<Currency, Currency, TradeType>\n          | V3Trade<Currency, Currency, TradeType>\n          | MixedRouteTrade<Currency, Currency, TradeType>\n        )[],\n    options: SwapOptions\n  ): MethodParameters {\n    const {\n      calldatas,\n      sampleTrade,\n      routerMustCustody,\n      inputIsNative,\n      outputIsNative,\n      totalAmountIn,\n      minimumAmountOut,\n    } = SwapRouter.encodeSwaps(trades, options)\n\n    // unwrap or sweep\n    if (routerMustCustody) {\n      if (outputIsNative) {\n        calldatas.push(PaymentsExtended.encodeUnwrapWETH9(minimumAmountOut.quotient, options.recipient, options.fee))\n      } else {\n        calldatas.push(\n          PaymentsExtended.encodeSweepToken(\n            sampleTrade.outputAmount.currency.wrapped,\n            minimumAmountOut.quotient,\n            options.recipient,\n            options.fee\n          )\n        )\n      }\n    }\n\n    // must refund when paying in ETH: either with an uncertain input amount OR if there's a chance of a partial fill.\n    // unlike ERC20's, the full ETH value must be sent in the transaction, so the rest must be refunded.\n    if (inputIsNative && (sampleTrade.tradeType === TradeType.EXACT_OUTPUT || SwapRouter.riskOfPartialFill(trades))) {\n      calldatas.push(Payments.encodeRefundETH())\n    }\n\n    return {\n      calldata: MulticallExtended.encodeMulticall(calldatas, options.deadlineOrPreviousBlockhash),\n      value: toHex(inputIsNative ? totalAmountIn.quotient : ZERO),\n    }\n  }\n\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trades to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapAndAddCallParameters(\n    trades: AnyTradeType,\n    options: SwapAndAddOptions,\n    position: Position,\n    addLiquidityOptions: CondensedAddLiquidityOptions,\n    tokenInApprovalType: ApprovalTypes,\n    tokenOutApprovalType: ApprovalTypes\n  ): MethodParameters {\n    const {\n      calldatas,\n      inputIsNative,\n      outputIsNative,\n      sampleTrade,\n      totalAmountIn: totalAmountSwapped,\n      quoteAmountOut,\n      minimumAmountOut,\n    } = SwapRouter.encodeSwaps(trades, options, true)\n\n    // encode output token permit if necessary\n    if (options.outputTokenPermit) {\n      invariant(quoteAmountOut.currency.isToken, 'NON_TOKEN_PERMIT_OUTPUT')\n      calldatas.push(SelfPermit.encodePermit(quoteAmountOut.currency, options.outputTokenPermit))\n    }\n\n    const chainId = sampleTrade.route.chainId\n    const zeroForOne = position.pool.token0.wrapped.address === totalAmountSwapped.currency.wrapped.address\n    const { positionAmountIn, positionAmountOut } = SwapRouter.getPositionAmounts(position, zeroForOne)\n\n    // if tokens are native they will be converted to WETH9\n    const tokenIn = inputIsNative ? WETH9[chainId] : positionAmountIn.currency.wrapped\n    const tokenOut = outputIsNative ? WETH9[chainId] : positionAmountOut.currency.wrapped\n\n    // if swap output does not make up whole outputTokenBalanceDesired, pull in remaining tokens for adding liquidity\n    const amountOutRemaining = positionAmountOut.subtract(quoteAmountOut.wrapped)\n    if (amountOutRemaining.greaterThan(CurrencyAmount.fromRawAmount(positionAmountOut.currency, 0))) {\n      // if output is native, this means the remaining portion is included as native value in the transaction\n      // and must be wrapped. Otherwise, pull in remaining ERC20 token.\n      outputIsNative\n        ? calldatas.push(PaymentsExtended.encodeWrapETH(amountOutRemaining.quotient))\n        : calldatas.push(PaymentsExtended.encodePull(tokenOut, amountOutRemaining.quotient))\n    }\n\n    // if input is native, convert to WETH9, else pull ERC20 token\n    inputIsNative\n      ? calldatas.push(PaymentsExtended.encodeWrapETH(positionAmountIn.quotient))\n      : calldatas.push(PaymentsExtended.encodePull(tokenIn, positionAmountIn.quotient))\n\n    // approve token balances to NFTManager\n    if (tokenInApprovalType !== ApprovalTypes.NOT_REQUIRED)\n      calldatas.push(ApproveAndCall.encodeApprove(tokenIn, tokenInApprovalType))\n    if (tokenOutApprovalType !== ApprovalTypes.NOT_REQUIRED)\n      calldatas.push(ApproveAndCall.encodeApprove(tokenOut, tokenOutApprovalType))\n\n    // represents a position with token amounts resulting from a swap with maximum slippage\n    // hence the minimal amount out possible.\n    const minimalPosition = Position.fromAmounts({\n      pool: position.pool,\n      tickLower: position.tickLower,\n      tickUpper: position.tickUpper,\n      amount0: zeroForOne ? position.amount0.quotient.toString() : minimumAmountOut.quotient.toString(),\n      amount1: zeroForOne ? minimumAmountOut.quotient.toString() : position.amount1.quotient.toString(),\n      useFullPrecision: false,\n    })\n\n    // encode NFTManager add liquidity\n    calldatas.push(\n      ApproveAndCall.encodeAddLiquidity(position, minimalPosition, addLiquidityOptions, options.slippageTolerance)\n    )\n\n    // sweep remaining tokens\n    inputIsNative\n      ? calldatas.push(PaymentsExtended.encodeUnwrapWETH9(ZERO))\n      : calldatas.push(PaymentsExtended.encodeSweepToken(tokenIn, ZERO))\n    outputIsNative\n      ? calldatas.push(PaymentsExtended.encodeUnwrapWETH9(ZERO))\n      : calldatas.push(PaymentsExtended.encodeSweepToken(tokenOut, ZERO))\n\n    let value: JSBI\n    if (inputIsNative) {\n      value = totalAmountSwapped.wrapped.add(positionAmountIn.wrapped).quotient\n    } else if (outputIsNative) {\n      value = amountOutRemaining.quotient\n    } else {\n      value = ZERO\n    }\n\n    return {\n      calldata: MulticallExtended.encodeMulticall(calldatas, options.deadlineOrPreviousBlockhash),\n      value: value.toString(),\n    }\n  }\n\n  // if price impact is very high, there's a chance of hitting max/min prices resulting in a partial fill of the swap\n  private static riskOfPartialFill(trades: AnyTradeType): boolean {\n    if (Array.isArray(trades)) {\n      return trades.some((trade) => {\n        return SwapRouter.v3TradeWithHighPriceImpact(trade)\n      })\n    } else {\n      return SwapRouter.v3TradeWithHighPriceImpact(trades)\n    }\n  }\n\n  private static v3TradeWithHighPriceImpact(\n    trade:\n      | Trade<Currency, Currency, TradeType>\n      | V2Trade<Currency, Currency, TradeType>\n      | V3Trade<Currency, Currency, TradeType>\n      | MixedRouteTrade<Currency, Currency, TradeType>\n  ): boolean {\n    return !(trade instanceof V2Trade) && trade.priceImpact.greaterThan(REFUND_ETH_PRICE_IMPACT_THRESHOLD)\n  }\n\n  private static getPositionAmounts(\n    position: Position,\n    zeroForOne: boolean\n  ): {\n    positionAmountIn: CurrencyAmount<Currency>\n    positionAmountOut: CurrencyAmount<Currency>\n  } {\n    const { amount0, amount1 } = position.mintAmounts\n    const currencyAmount0 = CurrencyAmount.fromRawAmount(position.pool.token0, amount0)\n    const currencyAmount1 = CurrencyAmount.fromRawAmount(position.pool.token1, amount1)\n\n    const [positionAmountIn, positionAmountOut] = zeroForOne\n      ? [currencyAmount0, currencyAmount1]\n      : [currencyAmount1, currencyAmount0]\n    return { positionAmountIn, positionAmountOut }\n  }\n}\n"],"names":["ApprovalTypes","MSG_SENDER","ADDRESS_THIS","ZERO","JSBI","BigInt","ONE","isMint","options","Object","keys","some","k","ApproveAndCall","encodeApproveMax","token","INTERFACE","encodeFunctionData","address","encodeApproveMaxMinusOne","encodeApproveZeroThenMax","encodeApproveZeroThenMaxMinusOne","encodeCallPositionManager","calldatas","length","invariant","encodedMulticall","NonfungiblePositionManager","encodeAddLiquidity","position","minimalPosition","addLiquidityOptions","slippageTolerance","_position$mintAmounts","mintAmountsWithSlippage","amount0Min","amount0","amount1Min","amount1","lessThan","quotient","token0","pool","token1","fee","tickLower","tickUpper","toHex","recipient","tokenId","encodeApprove","approvalType","MAX","wrapped","MAX_MINUS_ONE","ZERO_THEN_MAX","ZERO_THEN_MAX_MINUS_ONE","Interface","abi","MulticallExtended","encodeMulticall","validation","Multicall","Array","isArray","startsWith","previousBlockhash","bytes32","match","Error","toLowerCase","validateAndParseBytes32","deadline","encodeFeeBips","multiply","PaymentsExtended","encodeUnwrapWETH9","amountMinimum","feeOptions","Payments","feeBips","feeRecipient","validateAndParseAddress","encodeSweepToken","encodePull","amount","encodeWrapETH","MixedRouteSDK","pools","input","output","this","chainId","every","wrappedInput","involvesToken","_step","tokenPath","_iterator","_createForOfIteratorHelperLoose","entries","done","_step$value","value","currentInputToken","equals","nextToken","push","path","_createClass","key","get","_midPrice","price","slice","reduce","_ref","nextInput","token0Price","token1Price","Price","denominator","numerator","tradeComparator","a","b","inputAmount","currency","outputAmount","equalTo","swaps","total","cur","route","Protocol","MixedRouteTrade","routes","tradeType","inputCurrency","outputCurrency","_ref2","_ref3","numPools","map","_ref4","poolAddressSet","Set","_step2","_iterator2","add","Pool","getAddress","Pair","size","TradeType","EXACT_INPUT","fromRoute","_fromRoute","_asyncToGenerator","_regeneratorRuntime","mark","_callee","amounts","i","wrap","_context","prev","next","getOutputAmount","sent","CurrencyAmount","fromFractionalAmount","abrupt","stop","_x","_x2","_x3","apply","arguments","fromRoutes","_fromRoutes","_callee2","populatedRoutes","_iterator3","_step3","_step3$value","_context2","_x4","_x5","createUncheckedTrade","constructorArguments","_extends","createUncheckedTradeWithMultipleRoutes","_proto","prototype","minimumAmountOut","amountOut","slippageAdjustedAmountOut","Fraction","invert","fromRawAmount","maximumAmountIn","amountIn","worstExecutionPrice","bestTradeExactIn","_bestTradeExactIn","_callee3","currencyAmountIn","currencyOut","_temp","currentPools","nextAmountIn","bestTrades","maxNumResults","_ref5$maxNumResults","maxHops","_ref5$maxHops","_ref5","tokenOut","_context3","reserve0","reserve1","t0","isInsufficientInputAmountError","isToken","t1","sortedInsert","t2","concat","t3","t4","t5","poolsExcludingThisPool","_x6","_x7","_x8","_x9","_x10","_x11","_x12","_inputAmount","totalInputFromRoutes","_ref6","_outputAmount","totalOutputFromRoutes","_ref7","_this$_executionPrice","_executionPrice","_priceImpact","_step4","spotOutputAmount","_iterator4","_step4$value","midPrice","quote","priceImpact","subtract","divide","Percent","RouteV2","_V2RouteSDK","v2Route","_this","call","pairs","V2","_inheritsLoose","V2RouteSDK","RouteV3","_V3RouteSDK","v3Route","_this2","V3","V3RouteSDK","MixedRoute","_MixedRouteSDK","mixedRoute","_this3","MIXED","Trade","v2Routes","v3Routes","mixedRoutes","routev2","_step2$value","routev3","_step5","_iterator5","EXACT_OUTPUT","slippageAdjustedAmountIn","populatedV2Routes","populatedV3Routes","populatedMixedRoutes","_iterator6","_step6","_step6$value","v2Trade","_iterator7","_step7","_step7$value","_amount2","v3Trade","_iterator8","_step8","_step8$value","mixedRouteTrade","V2TradeSDK","V3TradeSDK","MixedRouteTradeSDK","_step9","_iterator9","_step9$value","encodeMixedRouteToPath","_route$pools$reduce","index","inputToken","types","outputToken","pack","partitionMixedRouteByProtocol","acc","left","right","getOutputOfPools","firstInputToken","REFUND_ETH_PRICE_IMPACT_THRESHOLD","SwapRouter","encodeV2Swap","trade","routerMustCustody","performAggregatedSlippageCheck","encodeV3Swap","singleHop","tokenIn","amountOutMinimum","sqrtPriceLimitX96","amountInMaximum","encodeRouteToPath","encodeMixedRouteSwap","_loop","mixedRouteIsAllV3","sections","isLastSectionInRoute","section","newRouteOriginal","newRoute","exactInputParams","encodeSwaps","trades","isSwapAndAdd","swap","protocol","individualTrades","V2Trade","V3Trade","numberOfTrades","sampleTrade","inputIsNative","isNative","outputIsNative","inputTokenPermit","SelfPermit","encodePermit","ZERO_IN","ZERO_OUT","sum","quoteAmountOut","totalAmountIn","swapCallParameters","_SwapRouter$encodeSwa","riskOfPartialFill","encodeRefundETH","calldata","deadlineOrPreviousBlockhash","swapAndAddCallParameters","tokenInApprovalType","tokenOutApprovalType","_SwapRouter$encodeSwa2","totalAmountSwapped","outputTokenPermit","zeroForOne","_SwapRouter$getPositi","getPositionAmounts","positionAmountIn","positionAmountOut","WETH9","amountOutRemaining","greaterThan","NOT_REQUIRED","Position","fromAmounts","toString","useFullPrecision","v3TradeWithHighPriceImpact","mintAmounts","currencyAmount0","currencyAmount1"],"mappings":"8IAgBYA,itBCdCC,EAAa,6CACbC,EAAe,6CAEfC,EAAOC,EAAKC,OAAO,GACnBC,EAAMF,EAAKC,OAAO,YDmBfE,EAAOC,GACrB,OAAOC,OAAOC,KAAKF,GAASG,MAAK,SAACC,GAAC,MAAW,cAANA,MAV9BZ,EAAAA,wBAAAA,4DAEVA,iBACAA,qCACAA,qCACAA,yDAQF,IAAsBa,aAMpB,SAAAA,KA4FC,OA5FuBA,EAEVC,iBAAP,SAAwBC,GAC7B,OAAOF,EAAeG,UAAUC,mBAAmB,aAAc,CAACF,EAAMG,WACzEL,EAEaM,yBAAP,SAAgCJ,GACrC,OAAOF,EAAeG,UAAUC,mBAAmB,qBAAsB,CAACF,EAAMG,WACjFL,EAEaO,yBAAP,SAAgCL,GACrC,OAAOF,EAAeG,UAAUC,mBAAmB,qBAAsB,CAACF,EAAMG,WACjFL,EAEaQ,iCAAP,SAAwCN,GAC7C,OAAOF,EAAeG,UAAUC,mBAAmB,6BAA8B,CAACF,EAAMG,WACzFL,EAEaS,0BAAP,SAAiCC,GAGtC,GAFUA,EAAUC,OAAS,GAA7BC,MAEwB,GAApBF,EAAUC,OACZ,OAAOX,EAAeG,UAAUC,mBAAmB,sBAAuBM,GAE1E,IAAMG,EAAmBC,6BAA2BX,UAAUC,mBAAmB,YAAa,CAACM,IAC/F,OAAOV,EAAeG,UAAUC,mBAAmB,sBAAuB,CAACS,KAG/Eb,EAOce,mBAAP,SACLC,EACAC,EACAC,EACAC,GAEA,IAAAC,EAAmDJ,EAASK,wBAAwBF,GAArEG,EAAUF,EAAnBG,QAA8BC,EAAUJ,EAAnBK,QAY3B,OAPIlC,EAAKmC,SAAST,EAAgBM,QAAQI,SAAUL,KAClDA,EAAaL,EAAgBM,QAAQI,UAEnCpC,EAAKmC,SAAST,EAAgBQ,QAAQE,SAAUH,KAClDA,EAAaP,EAAgBQ,QAAQE,UAGnCjC,EAAOwB,GACFlB,EAAeG,UAAUC,mBAAmB,OAAQ,CACzD,CACEwB,OAAQZ,EAASa,KAAKD,OAAOvB,QAC7ByB,OAAQd,EAASa,KAAKC,OAAOzB,QAC7B0B,IAAKf,EAASa,KAAKE,IACnBC,UAAWhB,EAASgB,UACpBC,UAAWjB,EAASiB,UACpBX,WAAYY,QAAMZ,GAClBE,WAAYU,QAAMV,GAClBW,UAAWjB,EAAoBiB,aAI5BnC,EAAeG,UAAUC,mBAAmB,oBAAqB,CACtE,CACEwB,OAAQZ,EAASa,KAAKD,OAAOvB,QAC7ByB,OAAQd,EAASa,KAAKC,OAAOzB,QAC7BiB,WAAYY,QAAMZ,GAClBE,WAAYU,QAAMV,GAClBY,QAASF,QAAMhB,EAAoBkB,aAI1CpC,EAEaqC,cAAP,SAAqBnC,EAAiBoC,GAC3C,OAAQA,GACN,KAAKnD,sBAAcoD,IACjB,OAAOvC,EAAeC,iBAAiBC,EAAMsC,SAC/C,KAAKrD,sBAAcsD,cACjB,OAAOzC,EAAeM,yBAAyBJ,EAAMsC,SACvD,KAAKrD,sBAAcuD,cACjB,OAAO1C,EAAeO,yBAAyBL,EAAMsC,SACvD,KAAKrD,sBAAcwD,wBACjB,OAAO3C,EAAeQ,iCAAiCN,EAAMsC,SAC/D,QACE,KAAM,gCAEXxC,KAjGaA,YAAuB,IAAI4C,YAAUC,OEdrD,IAAsBC,aAMpB,SAAAA,KAwBC,OAxBuBA,EAEVC,gBAAP,SAAuBrC,EAA8BsC,GAE1D,QAA0B,IAAfA,EACT,OAAOC,YAAUF,gBAAgBrC,GASnC,GALKwC,MAAMC,QAAQzC,KACjBA,EAAY,CAACA,IAIW,iBAAfsC,GAA2BA,EAAWI,WAAW,MAAO,CACjE,IAAMC,EA7BZ,SAAiCC,GAC/B,IAAKA,EAAQC,MAAM,uBACjB,MAAM,IAAIC,MAASF,4BAGrB,OAAOA,EAAQG,cAwBeC,CAAwBV,GAClD,OAAOF,EAAkB3C,UAAUC,mBAAmB,6BAA8B,CAClFiD,EACA3C,IAGF,IAAMiD,EAAWzB,QAAMc,GACvB,OAAOF,EAAkB3C,UAAUC,mBAAmB,6BAA8B,CAACuD,EAAUjD,KAElGoC,KCxCH,SAASc,EAAc7B,GACrB,OAAOG,QAAMH,EAAI8B,SAAS,KAAQlC,UDUpBmB,YAAuB,IAAIF,YAAUC,OCPrD,IAAsBiB,aAMpB,SAAAA,KAyDC,OAzDuBA,EAEVC,kBAAP,SAAyBC,EAAqB7B,EAAoB8B,GAEvE,GAAyB,iBAAd9B,EACT,OAAO+B,WAASH,kBAAkBC,EAAe7B,EAAW8B,GAG9D,GAAMA,EAAY,CAChB,IAAME,EAAUP,EAAcK,EAAWlC,KACnCqC,EAAeC,0BAAwBJ,EAAW9B,WAExD,OAAO2B,EAAiB3D,UAAUC,mBAAmB,8CAA+C,CAClG8B,QAAM8B,GACNG,EACAC,IAGF,OAAON,EAAiB3D,UAAUC,mBAAmB,uBAAwB,CAAC8B,QAAM8B,MAEvFF,EAEaQ,iBAAP,SACLpE,EACA8D,EACA7B,EACA8B,GAGA,GAAyB,iBAAd9B,EACT,OAAO+B,WAASI,iBAAiBpE,EAAO8D,EAAe7B,EAAW8B,GAGpE,GAAMA,EAAY,CAChB,IAAME,EAAUP,EAAcK,EAAWlC,KACnCqC,EAAeC,0BAAwBJ,EAAW9B,WAExD,OAAO2B,EAAiB3D,UAAUC,mBAAmB,qDAAsD,CACzGF,EAAMG,QACN6B,QAAM8B,GACNG,EACAC,IAGF,OAAON,EAAiB3D,UAAUC,mBAAmB,8BAA+B,CAClFF,EAAMG,QACN6B,QAAM8B,MAGXF,EAEaS,WAAP,SAAkBrE,EAAcsE,GACrC,OAAOV,EAAiB3D,UAAUC,mBAAmB,OAAQ,CAACF,EAAMG,QAAS6B,QAAMsC,MACpFV,EAEaW,cAAP,SAAqBD,GAC1B,OAAOV,EAAiB3D,UAAUC,mBAAmB,UAAW,CAAC8B,QAAMsC,MACxEV,ohRA9DaA,YAAuB,IAAIlB,YAAUC,OCErD,IAAa6B,aAcX,SAAAA,EAAmBC,EAAgBC,EAAeC,GAR1CC,eAA2C,KASvCH,EAAMhE,OAAS,GAAzBC,MAEA,IAAMmE,EAAUJ,EAAM,GAAGI,QACFJ,EAAMK,OAAM,SAACnD,GAAI,OAAKA,EAAKkD,UAAYA,MAC9DnE,MAEA,IAAMqE,EAAeL,EAAMpC,QACjBmC,EAAM,GAAGO,cAAcD,IAAjCrE,MAEU+D,EAAMA,EAAMhE,OAAS,GAAGuE,cAAcL,EAAOrC,UAAvD5B,MAMA,IADA,IACuCuE,EADjCC,EAAqB,CAACH,GAC5BI,EAAAC,EAAwBX,EAAMY,aAASJ,EAAAE,KAAAG,MAAE,CAAA,IAAAC,EAAAN,EAAAO,MAA1B7D,EAAI4D,KACXE,EAAoBP,EADfK,MAEDE,EAAkBC,OAAO/D,EAAKD,SAAW+D,EAAkBC,OAAO/D,EAAKC,SAAjFlB,MACA,IAAMiF,EAAYF,EAAkBC,OAAO/D,EAAKD,QAAUC,EAAKC,OAASD,EAAKD,OAC7EwD,EAAUU,KAAKD,GAGjBf,KAAKH,MAAQA,EACbG,KAAKiB,KAAOX,EACZN,KAAKF,MAAQA,EACbE,KAAKD,aAASA,EAAAA,EAAUO,EAAUA,EAAUzE,OAAS,GAqCtD,OApCAqF,EAAAtB,IAAAuB,cAAAC,IAED,WACE,OAAOpB,KAAKH,MAAM,GAAGI,WAGvBkB,eAAAC,IAGA,WACE,GAAuB,OAAnBpB,KAAKqB,UAAoB,OAAOrB,KAAKqB,UAEzC,IAAMC,EAAQtB,KAAKH,MAAM0B,MAAM,GAAGC,QAChC,SAAAC,EAAuB1E,OAATuE,EAAKG,EAALH,MACZ,OADUG,EAATC,UACgBZ,OAAO/D,EAAKD,QACzB,CACE4E,UAAW3E,EAAKC,OAChBsE,MAAOA,EAAMvC,SAAShC,EAAK4E,cAE7B,CACED,UAAW3E,EAAKD,OAChBwE,MAAOA,EAAMvC,SAAShC,EAAK6E,gBAGnC5B,KAAKH,MAAM,GAAG/C,OAAOgE,OAAOd,KAAKF,MAAMpC,SACnC,CACEgE,UAAW1B,KAAKH,MAAM,GAAG7C,OACzBsE,MAAOtB,KAAKH,MAAM,GAAG8B,aAEvB,CACED,UAAW1B,KAAKH,MAAM,GAAG/C,OACzBwE,MAAOtB,KAAKH,MAAM,GAAG+B,cAE3BN,MAEF,OAAQtB,KAAKqB,UAAY,IAAIQ,QAAM7B,KAAKF,MAAOE,KAAKD,OAAQuB,EAAMQ,YAAaR,EAAMS,eACtFnC,cC1EaoC,EACdC,EACAC,GAKA,OAFUD,EAAEE,YAAYC,SAAStB,OAAOoB,EAAEC,YAAYC,WAAtDtG,MACUmG,EAAEI,aAAaD,SAAStB,OAAOoB,EAAEG,aAAaD,WAAxDtG,MACImG,EAAEI,aAAaC,QAAQJ,EAAEG,cACvBJ,EAAEE,YAAYG,QAAQJ,EAAEC,aAEZF,EAAEM,MAAMf,QAAO,SAACgB,EAAOC,GAAG,OAAKD,EAAQC,EAAIC,MAAMzB,KAAKpF,SAAQ,GAC9DqG,EAAEK,MAAMf,QAAO,SAACgB,EAAOC,GAAG,OAAKD,EAAQC,EAAIC,MAAMzB,KAAKpF,SAAQ,GAI1EoG,EAAEE,YAAYvF,SAASsF,EAAEC,cACnB,EAED,EAILF,EAAEI,aAAazF,SAASsF,EAAEG,cACrB,GAEC,EAkBd,IC3DYM,ED2DCC,aAqRX,SAAAA,EAAAnB,OACEoB,EAAMpB,EAANoB,OACAC,EAASrB,EAATqB,UASMC,EAAgBF,EAAO,GAAGV,YAAYC,SACtCY,EAAiBH,EAAO,GAAGR,aAAaD,SAE5CS,EAAO3C,OAAM,SAAA+C,GAAQ,OAAOF,EAAcrF,QAAQoD,OAA7BmC,EAALP,MAA+C5C,MAAMpC,aADvE5B,MAKE+G,EAAO3C,OAAM,SAAAgD,GAAQ,OAAOF,EAAetF,QAAQoD,OAA9BoC,EAALR,MAAgD3C,OAAOrC,aADzE5B,MAOA,IAFA,IAE8BuE,EAFxB8C,EAAWN,EAAOO,KAAI,SAAAC,GAAQ,OAAAA,EAALX,MAAkB7C,MAAMhE,UAAQ2F,QAAO,SAACgB,EAAOC,GAAG,OAAKD,EAAQC,IAAK,GAC7Fa,EAAiB,IAAIC,IAC3BhD,EAAAC,EAAwBqC,KAAMxC,EAAAE,KAAAG,MAC5B,IAD8B,IACA8C,EAA9BC,EAAAjD,EADgBH,EAAAO,MAAL8B,MACc7C,SAAK2D,EAAAC,KAAA/C,MAAE,CAAA,IAArB3D,EAAIyG,EAAA5C,MAET0C,EAAeI,IADnB3G,aAAgB4G,OACOA,OAAKC,WAAW7G,EAAKD,OAAQC,EAAKC,OAAQD,EAAKE,KAC/C4G,OAAKD,WAAW7G,EAAKD,OAAQC,EAAKC,SAInDmG,GAAYG,EAAeQ,MAArChI,MAEUgH,IAAciB,YAAUC,aAAlClI,MAEAkE,KAAKuC,MAAQM,EACb7C,KAAK8C,UAAYA,EAjMnBF,EAUoBqB,UAAS,WAAA,IAAAC,EAAAC,EAAAC,IAAAC,MAAtB,SAAAC,EACL5B,EACAhD,EACAoD,GAAqB,IAAAyB,EAAApC,EAAAE,EAAAmC,EAAAzH,EAAA,OAAAqH,IAAAK,eAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEfL,EAAmC,IAAInG,MAAMsE,EAAMzB,KAAKpF,QAIpDiH,IAAciB,YAAUC,aAAlClI,MAEU4D,EAAO0C,SAAStB,OAAO4B,EAAM5C,QAAvChE,MACAyI,EAAQ,GAAK7E,EAAOhC,QACX8G,EAAI,EAAC,OAAA,KAAEA,EAAI9B,EAAMzB,KAAKpF,OAAS,IAAC6I,EAAAE,QAAA,MACZ,OAArB7H,EAAO2F,EAAM7C,MAAM2E,GAAEE,EAAAE,OACE7H,EAAK8H,gBAAgBN,EAAQC,IAAG,OAC7DD,EAAQC,EAAI,GADiDE,EAAAI,QAChC,QAHYN,IAAGE,EAAAE,OAAA,MAAA,QAU7C,OALDzC,EAAc4C,iBAAeC,qBAAqBtC,EAAM5C,MAAOJ,EAAOqC,UAAWrC,EAAOoC,aACxFO,EAAe0C,iBAAeC,qBAC5BtC,EAAM3C,OACNwE,EAAQA,EAAQ1I,OAAS,GAAGkG,UAC5BwC,EAAQA,EAAQ1I,OAAS,GAAGiG,aAC7B4C,EAAAO,gBAEM,IAAIrC,EAAgB,CACzBC,OAAQ,CAAC,CAAEV,YAAAA,EAAaE,aAAAA,EAAcK,MAAAA,IACtCI,UAAAA,KACA,QAAA,UAAA,OAAA4B,EAAAQ,UAAAZ,OACH,OAAA,SAAAa,EAAAC,EAAAC,GAAA,OAAAnB,EAAAoB,WAAAC,YA7B4B,GA+B7B3C,EAUoB4C,WAAU,WAAA,IAAAC,EAAAtB,EAAAC,IAAAC,MAAvB,SAAAqB,EACL7C,EAIAC,GAAqB,IAAA6C,EAAAC,EAAAC,EAAAC,EAAApD,EAAAhD,EAAA6E,EAAApC,EAAAE,EAAAmC,EAAAzH,EAAA,OAAAqH,IAAAK,eAAAsB,GAAA,cAAAA,EAAApB,KAAAoB,EAAAnB,MAAA,OAEfe,EAIA,GAEI7C,IAAciB,YAAUC,aAAlClI,MAA4D8J,EAAApF,EAE5BqC,GAAM,OAAA,IAAAgD,EAAAD,KAAAlF,MAAAqF,EAAAnB,QAAA,MAAzBlC,GAAyBoD,EAAAD,EAAAjF,OAAzB8B,MAAOhD,EAAMoG,EAANpG,OACZ6E,EAAmC,IAAInG,MAAMsE,EAAMzB,KAAKpF,QAC1DsG,SACAE,SAEM3C,EAAO0C,SAAStB,OAAO4B,EAAM5C,QAAvChE,MACAqG,EAAc4C,iBAAeC,qBAAqBtC,EAAM5C,MAAOJ,EAAOqC,UAAWrC,EAAOoC,aACxFyC,EAAQ,GAAKQ,iBAAeC,qBAAqBtC,EAAM5C,MAAMpC,QAASgC,EAAOqC,UAAWrC,EAAOoC,aAEtF0C,EAAI,EAAC,QAAA,KAAEA,EAAI9B,EAAMzB,KAAKpF,OAAS,IAACkK,EAAAnB,QAAA,MACZ,OAArB7H,EAAO2F,EAAM7C,MAAM2E,GAAEuB,EAAAnB,QACE7H,EAAK8H,gBAAgBN,EAAQC,IAAG,QAC7DD,EAAQC,EAAI,GADiDuB,EAAAjB,QAChC,QAHYN,IAAGuB,EAAAnB,QAAA,MAAA,QAM9CvC,EAAe0C,iBAAeC,qBAC5BtC,EAAM3C,OACNwE,EAAQA,EAAQ1I,OAAS,GAAGkG,UAC5BwC,EAAQA,EAAQ1I,OAAS,GAAGiG,aAG9B6D,EAAgB3E,KAAK,CAAE0B,MAAAA,EAAOP,YAAAA,EAAaE,aAAAA,IAAe,QAAA0D,EAAAnB,OAAA,MAAA,QAAA,OAAAmB,EAAAd,gBAGrD,IAAIrC,EAAgB,CACzBC,OAAQ8C,EACR7C,UAAAA,KACA,QAAA,UAAA,OAAAiD,EAAAb,UAAAQ,OACH,OAAA,SAAAM,EAAAC,GAAA,OAAAR,EAAAH,WAAAC,YA3C6B,GA6C9B3C,EAScsD,qBAAP,SAILC,GAMA,OAAO,IAAIvD,EAAewD,KACrBD,GACHtD,OAAQ,CACN,CACEV,YAAagE,EAAqBhE,YAClCE,aAAc8D,EAAqB9D,aACnCK,MAAOyD,EAAqBzD,YAMpCE,EAScyD,uCAAP,SAILF,GAQA,OAAO,IAAIvD,EAAgBuD,IAgD7B,IAAAG,EAAA1D,EAAA2D,UAtMC,OAsMDD,EAKOE,iBAAA,SAAiBnK,EAA4BoK,YAAAA,IAAAA,EAAYzG,KAAKqC,cACxDhG,EAAkBO,SAASpC,IAAtCsB,MAEA,IAAM4K,EAA4B,IAAIC,WAAShM,GAC5C+I,IAAIrH,GACJuK,SACA7H,SAAS0H,EAAU5J,UAAUA,SAChC,OAAOkI,iBAAe8B,cAAcJ,EAAUrE,SAAUsE,IAG1DJ,EAKOQ,gBAAA,SAAgBzK,EAA4B0K,GAEjD,gBAFiDA,IAAAA,EAAW/G,KAAKmC,aACtD9F,EAAkBO,SAASpC,IAAtCsB,MACOiL,GAITT,EAKOU,oBAAA,SAAoB3K,GACzB,OAAO,IAAIwF,QACT7B,KAAKmC,YAAYC,SACjBpC,KAAKqC,aAAaD,SAClBpC,KAAK8G,gBAAgBzK,GAAmBQ,SACxCmD,KAAKwG,iBAAiBnK,GAAmBQ,WAI7C+F,EAeoBqE,iBAAgB,WAAA,IAAAC,EAAA/C,EAAAC,IAAAC,MAA7B,SAAA8C,EACLtH,EACAuH,EACAC,EAAoBC,EAGpBC,EACAC,EACAC,8FAJEC,YAAuDC,gBAAF,GAAEL,GAAvDI,eAAgB,EAACC,EAAEC,YAAFC,EAAAC,EAAEF,SAAU,EAACC,WAEhCN,IAAAA,EAAgC,aAChCC,IAAAA,EAAyCJ,YACzCK,IAAAA,EAAwE,IAE9D5H,EAAMhE,OAAS,GAAzBC,MACU8L,EAAU,GAApB9L,MACUsL,IAAqBI,GAAgBD,EAAa1L,OAAS,GAArEC,MAEMiL,EAAWS,EAAa9J,QACxBqK,EAAWV,EAAY3J,QACpB8G,EAAI,EAAC,QAAA,KAAEA,EAAI3E,EAAMhE,SAAMmM,EAAApD,QAAA,MAE9B,IADM7H,EAAO8C,EAAM2E,IAET1H,OAAOgE,OAAOiG,EAAS3E,WAAcrF,EAAKC,OAAO8D,OAAOiG,EAAS3E,WAAS4F,EAAApD,QAAA,MAAA,OAAAoD,EAAA/C,sBAAA,QAAA,KAChFlI,aAAgB8G,SAAImE,EAAApD,QAAA,MAAA,IACjB7H,EAAckL,SAAS3F,QAAQ9H,KAAUuC,EAAcmL,SAAS5F,QAAQ9H,IAAKwN,EAAApD,QAAA,MAAA,OAAAoD,EAAA/C,sBAAA,QAKjF,OAFCwB,SAAgCuB,EAAArD,QAEjCqD,EAAApD,QAAoB7H,EAAK8H,gBAAgBkC,GAAS,QAAjDN,EAAiDuB,EAAAlD,QAAxCkD,EAAApD,QAAA,MAAA,QAAA,GAAAoD,EAAArD,QAAAqD,EAAAG,GAAAH,aAIPA,EAAAG,GAAMC,gCAA8BJ,EAAApD,QAAA,MAAA,OAAAoD,EAAA/C,sBAAA,QAAA,MAAA+C,EAAAG,GAAA,QAAA,IAMtC1B,EAAUrE,SAASiG,UAAW5B,EAAUrE,SAAStB,OAAOiH,IAASC,EAAApD,QAAA,MAEvD,OAFuDoD,EAAAM,GACnEC,eAAYP,EAAAQ,GACVf,EAAUO,EAAApD,QACJhC,EAAgBqB,UACpB,IAAIrE,KAAa6I,OAAKlB,GAAcxK,IAAOqK,EAAiBhF,SAAUiF,GACtED,EACArD,YAAUC,aACX,QAAAgE,EAAAU,GAAAV,EAAAlD,KAAAkD,EAAAW,GACDjB,EAAaM,EAAAY,GACb5G,GAAe,EAAAgG,EAAAM,IAAAN,EAAAQ,GAAAR,EAAAU,GAAAV,EAAAW,GAAAX,EAAAY,IAAAZ,EAAApD,QAAA,MAAA,QAAA,KAERgD,EAAU,GAAK/H,EAAMhE,OAAS,IAACmM,EAAApD,QAAA,MAGxC,OAFMiE,EAAyBhJ,EAAM0B,MAAM,EAAGiD,GAAGiE,OAAO5I,EAAM0B,MAAMiD,EAAI,EAAG3E,EAAMhE,SAEjFmM,EAAApD,QACMhC,EAAgBqE,iBACpB4B,EACAzB,EACAC,EACA,CACEK,cAAAA,EACAE,QAASA,EAAU,MACpBa,OACGlB,GAAcxK,IAClB0J,EACAgB,GACD,QA9C6BjD,IAAGwD,EAAApD,QAAA,MAAA,QAAA,OAAAoD,EAAA/C,gBAkD9BwC,GAAU,QAAA,UAAA,OAAAO,EAAA9C,UAAAiC,sBAClB,OAAA,SAAA2B,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAAA,OAAAlC,EAAA5B,WAAAC,YAnEmC,GAmEnCrE,EAAA0B,IAAAzB,YAAAC,IA/aD,WAEE,OAD+B,GAArBpB,KAAKuC,MAAM1G,QAArBC,MACOkE,KAAKuC,MAAM,GAAGG,SAwBvBvB,kBAAAC,IAGA,WACE,GAAIpB,KAAKqJ,aACP,OAAOrJ,KAAKqJ,aAGd,IAAMtG,EAAgB/C,KAAKuC,MAAM,GAAGJ,YAAYC,SAC1CkH,EAAuBtJ,KAAKuC,MAC/Ba,KAAI,SAAAmG,GAAc,OAAAA,EAAXpH,eACPX,QAAO,SAACgB,EAAOC,GAAG,OAAKD,EAAMkB,IAAIjB,KAAMsC,iBAAe8B,cAAc9D,EAAe,IAGtF,OADA/C,KAAKqJ,aAAeC,EACbtJ,KAAKqJ,gBASdlI,mBAAAC,IAGA,WACE,GAAIpB,KAAKwJ,cACP,OAAOxJ,KAAKwJ,cAGd,IAAMxG,EAAiBhD,KAAKuC,MAAM,GAAGF,aAAaD,SAC5CqH,EAAwBzJ,KAAKuC,MAChCa,KAAI,SAAAsG,GAAe,OAAAA,EAAZrH,gBACPb,QAAO,SAACgB,EAAOC,GAAG,OAAKD,EAAMkB,IAAIjB,KAAMsC,iBAAe8B,cAAc7D,EAAgB,IAGvF,OADAhD,KAAKwJ,cAAgBC,EACdzJ,KAAKwJ,iBASdrI,qBAAAC,IAGA,iBACE,cAAAuI,EACE3J,KAAK4J,iBAAeD,EACnB3J,KAAK4J,gBAAkB,IAAI/H,QAC1B7B,KAAKmC,YAAYC,SACjBpC,KAAKqC,aAAaD,SAClBpC,KAAKmC,YAAYtF,SACjBmD,KAAKqC,aAAaxF,aAWxBsE,kBAAAC,IAGA,WACE,GAAIpB,KAAK6J,aACP,OAAO7J,KAAK6J,aAId,IADA,IAC+CC,EAD3CC,EAAmBhF,iBAAe8B,cAAc7G,KAAKqC,aAAaD,SAAU,GAChF4H,EAAAxJ,EAAqCR,KAAKuC,SAAKuH,EAAAE,KAAAtJ,MAAE,CAAA,IAAAuJ,EAAAH,EAAAlJ,MAE/CmJ,EAAmBA,EAAiBrG,IAFpBuG,EAALvH,MACYwH,SAC0BC,MAFpBF,EAAX9H,cAKpB,IAAMiI,EAAcL,EAAiBM,SAASrK,KAAKqC,cAAciI,OAAOP,GAGxE,OAFA/J,KAAK6J,aAAe,IAAIU,UAAQH,EAAYrI,UAAWqI,EAAYtI,aAE5D9B,KAAK6J,iBACbjH,MClLSD,EAAAA,mBAAAA,8BAEVA,UACAA,oBCgBW6H,WACXC,GAMA,SAAAD,EAAYE,SAEa,OADvBC,EAAAF,EAAAG,UAAMF,EAAQG,MAAOH,EAAQ5K,MAAO4K,EAAQ3K,wBAJT4C,iBAASmI,GAK5CH,EAAK9K,MAAQ8K,EAAKE,MAAKF,EACxB,OATDI,EAAAP,EAAAC,GASCD,GATOQ,SAaGC,WACXC,GAMA,SAAAD,EAAYE,SAEmB,OAD7BC,EAAAF,EAAAN,UAAMO,EAAQtL,MAAOsL,EAAQrL,MAAOqL,EAAQpL,wBAJT4C,iBAAS0I,GAK5CD,EAAKnK,KAAOkK,EAAQ7K,UAAS8K,EAC9B,OATDL,EAAAE,EAAAC,GASCD,GATOK,SAaGC,WACXC,GAKA,SAAAD,EAAYE,SAFuC,OAGjDC,EAAAF,EAAAZ,UAAMa,EAAW5L,MAAO4L,EAAW3L,MAAO2L,EAAW1L,wBAHlB4C,iBAASgJ,MAAKD,EAIlD,OAPDX,EAAAQ,EAAAC,GAOCD,GAPO3L,GCvCGgM,aAiBX,SAAAA,EAAAnK,OACEoK,EAAQpK,EAARoK,SACAC,EAAQrK,EAARqK,SACAhJ,EAASrB,EAATqB,UACAiJ,EAAWtK,EAAXsK,YAmBA/L,KAAKuC,MAAQ,GACbvC,KAAK6C,OAAS,GAEd,QAA6DxC,EAA7DE,EAAAC,EAAqDqL,KAAQxL,EAAAE,KAAAG,MAAE,CAAA,IAAAC,EAAAN,EAAAO,MAAzCuB,EAAWxB,EAAXwB,YAAaE,EAAY1B,EAAZ0B,aAC3BK,EAAQ,IAAI8H,EADA7J,EAAPqL,SAEXhM,KAAK6C,OAAO7B,KAAK0B,GACjB1C,KAAKuC,MAAMvB,KAAK,CACd0B,MAAAA,EACAP,YAAAA,EACAE,aAAAA,IAIJ,QAA6DmB,EAA7DC,EAAAjD,EAAqDsL,KAAQtI,EAAAC,KAAA/C,MAAE,CAAA,IAAAuL,EAAAzI,EAAA5C,MAAzCuB,EAAW8J,EAAX9J,YAAaE,EAAY4J,EAAZ5J,aAC3BK,EAAQ,IAAIuI,EADAgB,EAAPC,SAEXlM,KAAK6C,OAAO7B,KAAK0B,GACjB1C,KAAKuC,MAAMvB,KAAK,CACd0B,MAAAA,EACAP,YAAAA,EACAE,aAAAA,IAIJ,GAAI0J,EACF,QAAmElG,EAAnED,EAAApF,EAAwDuL,KAAWlG,EAAAD,KAAAlF,MAAE,CAAA,IAAAoF,EAAAD,EAAAjF,MAA5CuB,EAAW2D,EAAX3D,YAAaE,EAAYyD,EAAZzD,aAC9BK,EAAQ,IAAI6I,EADGzF,EAAV2F,YAEXzL,KAAK6C,OAAO7B,KAAK0B,GACjB1C,KAAKuC,MAAMvB,KAAK,CACd0B,MAAAA,EACAP,YAAAA,EACAE,aAAAA,IAINrC,KAAK8C,UAAYA,EAGjB,IAAMC,EAAgB/C,KAAKuC,MAAM,GAAGJ,YAAYC,SAC1CY,EAAiBhD,KAAKuC,MAAM,GAAGF,aAAaD,SAEhDpC,KAAKuC,MAAMrC,OAAM,SAAA+C,GAAQ,OAAOF,EAAcrF,QAAQoD,OAA7BmC,EAALP,MAA+C5C,MAAMpC,aAD3E5B,MAKEkE,KAAKuC,MAAMrC,OAAM,SAAAgD,GAAQ,OAAOF,EAAetF,QAAQoD,OAA9BoC,EAALR,MAAgD3C,OAAOrC,aAD7E5B,MAQA,IAFA,IAEkCgO,EAF5B3G,EAAWnD,KAAKuC,MAAMa,KAAI,SAAAC,GAAQ,OAAAA,EAALX,MAAkB7C,MAAMhE,UAAQ2F,QAAO,SAACgB,EAAOC,GAAG,OAAKD,EAAQC,IAAK,GACjGa,EAAiB,IAAIC,IAC3ByG,EAAAxJ,EAAwBR,KAAKuC,SAAKuH,EAAAE,KAAAtJ,MAChC,IADkC,IACJyL,EAA9BC,EAAA5L,EADgBsJ,EAAAlJ,MAAL8B,MACc7C,SAAKsM,EAAAC,KAAA1L,MAAE,CAAA,IAArB3D,EAAIoP,EAAAvL,MACb,GAAI7D,aAAgB4G,OAClBL,EAAeI,IAAIC,OAAKC,WAAW7G,EAAKD,OAAQC,EAAKC,OAASD,EAAcE,UACvE,CAAA,KAAIF,aAAgB8G,QAIzB,MAAM,IAAInF,MAAM,gEAFhB4E,EAAeI,IAAIG,OAAKD,WADX7G,EAC2BD,OAD3BC,EACwCC,UAMjDmG,GAAYG,EAAeQ,MAArChI,MACD,IAAAwK,EAAAsF,EAAArF,UAsEA,OAEDD,EAKOE,iBAAA,SAAiBnK,EAA4BoK,GAElD,YAFkDA,IAAAA,EAAYzG,KAAKqC,cACxDhG,EAAkBO,SAASpC,IAAtCsB,MACIkE,KAAK8C,YAAciB,YAAUsI,aAC/B,OAAO5F,EAEP,IAAMC,EAA4B,IAAIC,WAAShM,GAC5C+I,IAAIrH,GACJuK,SACA7H,SAAS0H,EAAU5J,UAAUA,SAChC,OAAOkI,iBAAe8B,cAAcJ,EAAUrE,SAAUsE,IAI5DJ,EAKOQ,gBAAA,SAAgBzK,EAA4B0K,GAEjD,YAFiDA,IAAAA,EAAW/G,KAAKmC,aACtD9F,EAAkBO,SAASpC,IAAtCsB,MACIkE,KAAK8C,YAAciB,YAAUC,YAC/B,OAAO+C,EAEP,IAAMuF,EAA2B,IAAI3F,WAAShM,GAAK+I,IAAIrH,GAAmB0C,SAASgI,EAASlK,UAAUA,SACtG,OAAOkI,iBAAe8B,cAAcE,EAAS3E,SAAUkK,IAI3DhG,EAKOU,oBAAA,SAAoB3K,GACzB,OAAO,IAAIwF,QACT7B,KAAKmC,YAAYC,SACjBpC,KAAKqC,aAAaD,SAClBpC,KAAK8G,gBAAgBzK,GAAmBQ,SACxCmD,KAAKwG,iBAAiBnK,GAAmBQ,WAE5C+O,EAEmBpG,sBAAU,IAAAC,EAAAtB,EAAAC,IAAAC,MAAvB,SAAAC,EACLuH,EAIAC,EAIAhJ,EACAiJ,GAGG,IAAAQ,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAZ,EAAAa,EAAAC,EAAAC,EAAAC,EAAAd,EAAAe,EAAAC,EAAAC,EAAAC,EAAAC,EAAA5B,EAAA/L,EAAA4N,EAAA,OAAAlJ,IAAAK,eAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAoBH,IAlBM2H,EAIA,GAEAC,EAIA,GAEAC,EAIA,GAENC,EAAAlM,EAAkCqL,KAAQc,EAAAD,KAAAhM,MAClCmM,EAAU,IAAIU,QADTvB,GAA+BY,EAAAD,EAAA/L,OAA/BoL,QAAeY,EAANlN,OAC4BoD,GAGhDyJ,EAAkBvL,KAAK,CACrBgL,QAAAA,EACA7J,YAJoC0K,EAA9B1K,YAKNE,aALoCwK,EAAjBxK,eAOtByK,EAAAtM,EAEiCsL,GAAQ,OAAA,IAAAiB,EAAAD,KAAApM,MAAAgE,EAAAE,QAAA,MAAd,OAAfsH,GAA6Bc,EAAAD,EAAAnM,OAA7BsL,QAASxM,EAAMsN,EAANtN,OAAMgF,EAAAE,OACJ4I,QAAWvJ,UAAUiI,EAASxM,EAAQoD,GAAU,OAGtE0J,EAAkBxL,KAAK,CACrBkL,QAAAA,EACA/J,aALI+K,EAAOxI,EAAAI,MACL3C,YAKNE,aALoC6K,EAAjB7K,eAMnB,QAAAqC,EAAAE,OAAA,MAAA,QAAA,IAGAmH,GAAWrH,EAAAE,QAAA,MAAAuI,EAAA3M,EACwBuL,GAAW,QAAA,IAAAqB,EAAAD,KAAAzM,MAAAgE,EAAAE,QAAA,MAAjB,OAAlB6G,GAAmC4B,EAAAD,EAAAxM,OAAnC6K,WAAY/L,EAAM2N,EAAN3N,OAAMgF,EAAAE,QACC6I,EAAmBxJ,UAAUwH,EAAY/L,EAAQoD,GAAU,QAGzF2J,EAAqBzL,KAAK,CACxByK,WAAAA,EACAtJ,aALImL,EAAe5I,EAAAI,MACb3C,YAKNE,aALoCiL,EAAjBjL,eAMnB,QAAAqC,EAAAE,QAAA,MAAA,QAAA,OAAAF,EAAAO,gBAIC,IAAI2G,EAAM,CACfC,SAAUU,EACVT,SAAUU,EACVT,YAAaU,EACb3J,UAAAA,KACA,QAAA,UAAA,OAAA4B,EAAAQ,UAAAZ,OACH,OAAA,SAAAa,EAAAC,EAAAC,EAAAW,GAAA,OAAAP,EAAAH,WAAAC,eAAAqG,EAEmB3H,qBAAS,IAAAC,EAAAC,EAAAC,IAAAC,MAAtB,SAAAqB,EACLhD,EACAhD,EACAoD,GAAqB,IAAA+I,EAAAC,EAAAC,EAAAc,EAAAK,EAAAI,EAAA,OAAAlJ,IAAAK,eAAAsB,GAAA,cAAAA,EAAApB,KAAAoB,EAAAnB,MAAA,OAkBb,GAhBJiH,EAIE,GAEFC,EAIE,GAEFC,EAIE,KAEFrJ,aAAiBsI,UAAUjF,EAAAnB,OAAA,MACvBiI,EAAU,IAAIU,QAAW7K,EAAOhD,EAAQoD,GAE9C+I,EAAW,CAAC,CAAEG,QAAStJ,EAAOP,YADQ0K,EAA9B1K,YACmCE,aADLwK,EAAjBxK,eACqC0D,EAAAnB,QAAA,MAAA,OAAA,KACjDlC,aAAiB4I,UAAUvF,EAAAnB,QAAA,MAAA,OAAAmB,EAAAnB,QACd4I,QAAWvJ,UAAUvB,EAAOhD,EAAQoD,GAAU,QAEpEgJ,EAAW,CAAC,CAAEI,QAASxJ,EAAOP,aAFxB+K,EAAOnH,EAAAjB,MACL3C,YACmCE,aADL6K,EAAjB7K,eACqC0D,EAAAnB,QAAA,MAAA,QAAA,KACjDlC,aAAiB9C,IAAamG,EAAAnB,QAAA,MAAA,OAAAmB,EAAAnB,QACT6I,EAAmBxJ,UAAUvB,EAAOhD,EAAQoD,GAAU,QAEpFiJ,EAAc,CAAC,CAAEN,WAAY/I,EAAOP,aAF9BmL,EAAevH,EAAAjB,MACb3C,YACyCE,aADXiL,EAAjBjL,eAC2C0D,EAAAnB,QAAA,MAAA,QAAA,MAE1D,IAAIlG,MAAM,sBAAqB,QAAA,OAAAqH,EAAAd,gBAGhC,IAAI2G,EAAM,CACfC,SAAAA,EACAC,SAAAA,EACAC,YAAAA,EACAjJ,UAAAA,KACA,QAAA,UAAA,OAAAiD,EAAAb,UAAAQ,OACH,OAAA,SAAAO,EAAA6C,EAAAC,GAAA,OAAA7E,EAAAoB,WAAAC,eAAArE,EAAA0K,IAAAzK,kBAAAC,IA9OD,WACE,GAAIpB,KAAKqJ,aACP,OAAOrJ,KAAKqJ,aAGd,IAAMtG,EAAgB/C,KAAKuC,MAAM,GAAGJ,YAAYC,SAC1CkH,EAAuBtJ,KAAKuC,MAC/Ba,KAAI,SAAA0E,GAAc,OAAAA,EAAX3F,eACPX,QAAO,SAACgB,EAAOC,GAAG,OAAKD,EAAMkB,IAAIjB,KAAMsC,iBAAe8B,cAAc9D,EAAe,IAGtF,OADA/C,KAAKqJ,aAAeC,EACbtJ,KAAKqJ,gBACblI,mBAAAC,IAED,WACE,GAAIpB,KAAKwJ,cACP,OAAOxJ,KAAKwJ,cAGd,IAAMxG,EAAiBhD,KAAKuC,MAAM,GAAGF,aAAaD,SAC5CqH,EAAwBzJ,KAAKuC,MAChCa,KAAI,SAAAmG,GAAe,OAAAA,EAAZlH,gBACPb,QAAO,SAACgB,EAAOC,GAAG,OAAKD,EAAMkB,IAAIjB,KAAMsC,iBAAe8B,cAAc7D,EAAgB,IAGvF,OADAhD,KAAKwJ,cAAgBC,EACdzJ,KAAKwJ,iBAKdrI,qBAAAC,IAGA,iBACE,cAAAuI,EACE3J,KAAK4J,iBAAeD,EACnB3J,KAAK4J,gBAAkB,IAAI/H,QAC1B7B,KAAKmC,YAAYC,SACjBpC,KAAKqC,aAAaD,SAClBpC,KAAKmC,YAAYtF,SACjBmD,KAAKqC,aAAaxF,aAUxBsE,kBAAAC,IAGA,WACE,GAAIpB,KAAK6J,aACP,OAAO7J,KAAK6J,aAId,IADA,IAC+C6D,EAD3C3D,EAAmBhF,iBAAe8B,cAAc7G,KAAKqC,aAAaD,SAAU,GAChFuL,EAAAnN,EAAqCR,KAAKuC,SAAKmL,EAAAC,KAAAjN,MAAE,CAAA,IAAAkN,EAAAF,EAAA9M,MAE/CmJ,EAAmBA,EAAiBrG,IAFpBkK,EAALlL,MACYwH,SAC0BC,MAFpByD,EAAXzL,cAKpB,IAAMiI,EAAcL,EAAiBM,SAASrK,KAAKqC,cAAciI,OAAOP,GAGxE,OAFA/J,KAAK6J,aAAe,IAAIU,UAAQH,EAAYrI,UAAWqI,EAAYtI,aAE5D9B,KAAK6J,iBACb+B,cC1KaiC,EAAuBnL,GACrC,IAEAoL,EAAwBpL,EAAM7C,MAAM2B,QAClC,SAAAC,EAEE1E,EACAgR,OAFEC,EAAUvM,EAAVuM,WAAY/M,EAAIQ,EAAJR,KAAMgN,EAAKxM,EAALwM,MAIdC,EAAqBnR,EAAKD,OAAOgE,OAAOkN,GAAcjR,EAAKC,OAASD,EAAKD,OAC/E,OAAc,IAAViR,EACK,CACLC,WAAYE,EACZD,MAAO,CAAC,UAAW,SAAU,WAC7BhN,KAAM,CAAC+M,EAAWzS,QAASwB,aAAgB4G,OAAO5G,EAAKE,IRlB1B,QQkByDiR,EAAY3S,UAG7F,CACLyS,WAAYE,EACZD,SAAKxF,OAAMwF,GAAO,SAAU,YAC5BhN,QAAIwH,OAAMxH,GAAMlE,aAAgB4G,OAAO5G,EAAKE,IRxBf,QQwB8CiR,EAAY3S,aAI7F,CAAEyS,WAvB2BtL,EAAM5C,MAAMpC,QAuBVuD,KAAM,GAAIgN,MAAO,KAGlD,OAAOE,OAxBYL,EAALG,MAAFH,EAAJ7M,UCNGmN,EAAgC,SAAC1L,GAK5C,IAJA,IAAI2L,EAAM,GAENC,EAAO,EACPC,EAAQ,EACLA,EAAQ7L,EAAM7C,MAAMhE,SAEtB6G,EAAM7C,MAAMyO,aAAiB3K,QAAQjB,EAAM7C,MAAM0O,aAAkB1K,QACnEnB,EAAM7C,MAAMyO,aAAiBzK,QAAQnB,EAAM7C,MAAM0O,aAAkB5K,UAEpE0K,EAAIrN,KAAK0B,EAAM7C,MAAM0B,MAAM+M,EAAMC,IACjCD,EAAOC,KAGTA,IACc7L,EAAM7C,MAAMhE,QAExBwS,EAAIrN,KAAK0B,EAAM7C,MAAM0B,MAAM+M,EAAMC,IAGrC,OAAOF,GASIG,EAAmB,SAAC3O,EAAwB4O,GAWvD,OAVoC5O,EAAM2B,QACxC,SAAAC,EAAiB1E,OAAdiR,EAAUvM,EAAVuM,WACD,IAAKjR,EAAKqD,cAAc4N,GAAa,MAAM,IAAItP,MAAM,QAErD,MAAO,CACLsP,WAFyBjR,EAAKD,OAAOgE,OAAOkN,GAAcjR,EAAKC,OAASD,EAAKD,UAKjF,CAAEkR,WAAYS,IARRT,YCVJxT,EAAOC,EAAKC,OAAO,GACnBgU,EAAoC,IAAInE,UAAQ9P,EAAKC,OAAO,IAAKD,EAAKC,OAAO,MAqD7DiU,aAMpB,SAAAA,KAqlBC,OAnlBDA,EAQeC,aAAP,SACNC,EACAhU,EACAiU,EACAC,GAEA,IAAMhI,EAAmB3J,QAAMyR,EAAM/H,gBAAgBjM,EAAQwB,mBAAmBQ,UAC1E4J,EAAoBrJ,QAAMyR,EAAMrI,iBAAiB3L,EAAQwB,mBAAmBQ,UAE5EoE,EAAO4N,EAAMnM,MAAMzB,KAAKmC,KAAI,SAAChI,GAAK,OAAKA,EAAMG,WAC7C8B,EAAYyR,EACdvU,OAC6B,IAAtBM,EAAQwC,UACf/C,EACAiF,0BAAwB1E,EAAQwC,WAEpC,OAAIwR,EAAM/L,YAAciB,YAAUC,YAGzB2K,EAAWtT,UAAUC,mBAAmB,2BAFtB,CAACyL,EAAUgI,EAAiC,EAAItI,EAAWxF,EAAM5D,IAMnFsR,EAAWtT,UAAUC,mBAAmB,2BAFrB,CAACmL,EAAWM,EAAU9F,EAAM5D,KAM1DsR,EAQeK,aAAP,SACNH,EACAhU,EACAiU,EACAC,GAIA,IAFA,IAE8D1O,EAFxDzE,EAAsB,GAE5B2E,EAAAC,EAAmDqO,EAAMtM,SAAKlC,EAAAE,KAAAG,MAAE,CAAA,IAAAC,EAAAN,EAAAO,MAAnD8B,EAAK/B,EAAL+B,MAAoBL,EAAY1B,EAAZ0B,aACzB0E,EAAmB3J,QAAMyR,EAAM/H,gBAAgBjM,EAAQwB,kBADhCsE,EAAXwB,aAC2EtF,UACvF4J,EAAoBrJ,QAAMyR,EAAMrI,iBAAiB3L,EAAQwB,kBAAmBgG,GAAcxF,UAG1FoS,EAAmC,IAAvBvM,EAAM7C,MAAMhE,OAExBwB,EAAYyR,EACdvU,OAC6B,IAAtBM,EAAQwC,UACf/C,EACAiF,0BAAwB1E,EAAQwC,WAEpC,GAAI4R,EAYArT,EAAUoF,KAXR6N,EAAM/L,YAAciB,YAAUC,YAWjB2K,EAAWtT,UAAUC,mBAAmB,mBAAoB,CAV5C,CAC7B4T,QAASxM,EAAMpC,UAAU,GAAG/E,QAC5BwM,SAAUrF,EAAMpC,UAAU,GAAG/E,QAC7B0B,IAAKyF,EAAM7C,MAAM,GAAG5C,IACpBI,UAAAA,EACA0J,SAAAA,EACAoI,iBAAkBJ,EAAiC,EAAItI,EACvD2I,kBAAmB,KAeNT,EAAWtT,UAAUC,mBAAmB,oBAAqB,CAV5C,CAC9B4T,QAASxM,EAAMpC,UAAU,GAAG/E,QAC5BwM,SAAUrF,EAAMpC,UAAU,GAAG/E,QAC7B0B,IAAKyF,EAAM7C,MAAM,GAAG5C,IACpBI,UAAAA,EACAoJ,UAAAA,EACA4I,gBAAiBtI,EACjBqI,kBAAmB,UAKlB,CACL,IAAMnO,EAAeqO,oBAAkB5M,EAAOmM,EAAM/L,YAAciB,YAAUsI,cAU1EzQ,EAAUoF,KARR6N,EAAM/L,YAAciB,YAAUC,YAQjB2K,EAAWtT,UAAUC,mBAAmB,aAAc,CAP5C,CACvB2F,KAAAA,EACA5D,UAAAA,EACA0J,SAAAA,EACAoI,iBAAkBJ,EAAiC,EAAItI,KAY1CkI,EAAWtT,UAAUC,mBAAmB,cAAe,CAP5C,CACxB2F,KAAAA,EACA5D,UAAAA,EACAoJ,UAAAA,EACA4I,gBAAiBtI,OAQzB,OAAOnL,GAGT+S,EASeY,qBAAP,SACNV,EACAhU,EACAiU,EACAC,GAEA,IAAMnT,EAAsB,GAElBiT,EAAM/L,YAAciB,YAAUC,aAAxClI,MAEA,IAFkE,IAEJ0H,EAFIgM,aAEF,IAAAvD,EAAAzI,EAAA5C,MAAnD8B,EAAKuJ,EAALvJ,MAAoBL,EAAY4J,EAAZ5J,aACzB0E,EAAmB3J,QAAMyR,EAAM/H,gBAAgBjM,EAAQwB,kBADhC4P,EAAX9J,aAC2EtF,UACvF4J,EAAoBrJ,QAAMyR,EAAMrI,iBAAiB3L,EAAQwB,kBAAmBgG,GAAcxF,UAG1FoS,EAAmC,IAAvBvM,EAAM7C,MAAMhE,OAExBwB,EAAYyR,EACdvU,OAC6B,IAAtBM,EAAQwC,UACf/C,EACAiF,0BAAwB1E,EAAQwC,WAE9BoS,EAAoB,SAAC/M,GACzB,OAAOA,EAAM7C,MAAMK,OAAM,SAACnD,GAAI,OAAKA,aAAgB4G,WAGrD,GAAIsL,EAGF,GAAIQ,EAAkB/M,GAWpB9G,EAAUoF,KAAK2N,EAAWtT,UAAUC,mBAAmB,mBAAoB,CAV5C,CAC7B4T,QAASxM,EAAMzB,KAAK,GAAG1F,QACvBwM,SAAUrF,EAAMzB,KAAK,GAAG1F,QACxB0B,IAAMyF,EAAM7C,MAAiB,GAAG5C,IAChCI,UAAAA,EACA0J,SAAAA,EACAoI,iBAAkBJ,EAAiC,EAAItI,EACvD2I,kBAAmB,UAIhB,CACL,IAAMnO,EAAOyB,EAAMzB,KAAKmC,KAAI,SAAChI,GAAK,OAAKA,EAAMG,WAI7CK,EAAUoF,KAAK2N,EAAWtT,UAAUC,mBAAmB,2BAF9B,CAACyL,EAAUgI,EAAiC,EAAItI,EAAWxF,EAAM5D,UAc5F,IATA,IAMI6Q,EANEwB,EAAWtB,EAA8B1L,GAEzCiN,EAAuB,SAACnL,GAC5B,OAAOA,IAAMkL,EAAS7T,OAAS,GAI7BmS,EAAatL,EAAM5C,MAAMpC,QAEpB8G,EAAI,EAAGA,EAAIkL,EAAS7T,OAAQ2I,IAAK,CACxC,IAAMoL,EAAUF,EAASlL,GAEzB0J,EAAcM,EAAiBoB,EAAS5B,GAExC,IAAM6B,EAAmB,IAAIjQ,KAAa6I,OACpCmH,GACJA,EAAQ,GAAG9S,OAAOgE,OAAOkN,GAAc4B,EAAQ,GAAG9S,OAAS8S,EAAQ,GAAG5S,OACtEkR,GAEI4B,EAAW,IAAIvE,EAAWsE,GAKhC,GAFA7B,EAAaE,EAETuB,EAAkBK,GAAW,CAC/B,IACMC,EAAmB,CACvB9O,KAFmB4M,EAAuBiC,GAM1CzS,UAAWsS,EAAqBnL,GAAKnH,EAAY9C,EACjDwM,SAAe,GAALvC,EAASuC,EAAW,EAC9BoI,iBAAmBQ,EAAqBnL,GAASiC,EAAJ,GAG/C7K,EAAUoF,KAAK2N,EAAWtT,UAAUC,mBAAmB,aAAc,CAACyU,SACjE,CACL,IAAMA,EAAmB,CAClB,GAALvL,EAASuC,EAAW,EACnB4I,EAAqBnL,GAASiC,EAAJ,EAC3BqJ,EAAS7O,KAAKmC,KAAI,SAAChI,GAAK,OAAKA,EAAMG,WACnCoU,EAAqBnL,GAAKnH,EAAY9C,GAGxCqB,EAAUoF,KAAK2N,EAAWtT,UAAUC,mBAAmB,2BAA4ByU,OArF3FtM,EAAAjD,EAAmDqO,EAAMtM,SAAKiB,EAAAC,KAAA/C,MAAA8O,IA2F9D,OAAO5T,GACR+S,EAEcqB,YAAP,SACNC,EACApV,EACAqV,GAeA,GAAID,aAAkBrE,EAAO,CAEzBqE,EAAO1N,MAAMrC,OACX,SAACiQ,GAAI,OACHA,EAAKzN,MAAM0N,UAAYzN,iBAAS0I,IAChC8E,EAAKzN,MAAM0N,UAAYzN,iBAASmI,IAChCqF,EAAKzN,MAAM0N,UAAYzN,iBAASgJ,UALtC7P,MAgBA,IANA,IAM+D+J,EAN3DwK,EAIE,GAENzK,EAAApF,EAAmDyP,EAAO1N,SAAKsD,EAAAD,KAAAlF,MAAE,CAAA,IAAAoF,EAAAD,EAAAjF,MAApD8B,EAAKoD,EAALpD,MAAOP,EAAW2D,EAAX3D,YAAaE,EAAYyD,EAAZzD,aAC/B,GAAIK,EAAM0N,UAAYzN,iBAASmI,GAC7BuF,EAAiBrP,KACf,IAAIsP,QACF5N,EACAuN,EAAOnN,WAAaiB,YAAUC,YAAc7B,EAAcE,EAC1D4N,EAAOnN,iBAGN,GAAIJ,EAAM0N,UAAYzN,iBAAS0I,GACpCgF,EAAiBrP,KACfuP,QAAQrK,qBAAqB,CAC3BxD,MAAOA,EACPP,YAAAA,EACAE,aAAAA,EACAS,UAAWmN,EAAOnN,iBAGjB,CAAA,GAAIJ,EAAM0N,UAAYzN,iBAASgJ,MAWpC,MAAM,IAAIjN,MAAM,8BAVhB2R,EAAiBrP,KAEf4B,EAAgBsD,qBAAqB,CACnCxD,MAAOA,EACPP,YAAAA,EACAE,aAAAA,EACAS,UAAWmN,EAAOnN,cAO1BmN,EAASI,EAGNjS,MAAMC,QAAQ4R,KACjBA,EAAS,CAACA,IAGZ,IAAMO,EAAiBP,EAAOzO,QAC5B,SAACgP,EAAgB3B,GAAK,OACpB2B,GAAkB3B,aAAiB0B,SAAW1B,aAAiBjM,EAAkBiM,EAAMtM,MAAM1G,OAAS,KACxG,GAGI4U,EAAcR,EAAO,GAIzBA,EAAO/P,OAAM,SAAC2O,GAAK,OAAKA,EAAM1M,YAAYC,SAAStB,OAAO2P,EAAYtO,YAAYC,cADpFtG,MAKEmU,EAAO/P,OAAM,SAAC2O,GAAK,OAAKA,EAAMxM,aAAaD,SAAStB,OAAO2P,EAAYpO,aAAaD,cADtFtG,MAKEmU,EAAO/P,OAAM,SAAC2O,GAAK,OAAKA,EAAM/L,YAAc2N,EAAY3N,cAD1DhH,MAKA,IAAMF,EAAsB,GAEtB8U,EAAgBD,EAAYtO,YAAYC,SAASuO,SACjDC,EAAiBH,EAAYpO,aAAaD,SAASuO,SAMnD5B,EAAiC0B,EAAY3N,YAAciB,YAAUC,aAAewM,EAAiB,EAMrG1B,EAAoB8B,KAAoB/V,EAAQoC,OAASiT,GAAgBnB,EAG3ElU,EAAQgW,mBACAJ,EAAYtO,YAAYC,SAASiG,SAA3CvM,MACAF,EAAUoF,KAAK8P,aAAWC,aAAaN,EAAYtO,YAAYC,SAAUvH,EAAQgW,oBAGnF,QAA0B/G,EAA1BE,EAAAxJ,EAAoByP,KAAMnG,EAAAE,KAAAtJ,MAAE,CAAA,IAAjBmO,EAAK/E,EAAAlJ,MACd,GAAIiO,aAAiByB,QACnB1U,EAAUoF,KAAK2N,EAAWC,aAAaC,EAAOhU,EAASiU,EAAmBC,SACrE,GAAIF,aAAiB0B,QAC1B,QAKCpE,EALDC,EAAA5L,EAAuBmO,EAAWK,aAChCH,EACAhU,EACAiU,EACAC,MACD5C,EAAAC,KAAA1L,MACC9E,EAAUoF,KANOmL,EAAAvL,WAQd,CAAA,KAAIiO,aAAiBjM,GAU1B,MAAM,IAAIlE,MAAM,4BAThB,QAKCiO,EALDD,EAAAlM,EAAuBmO,EAAWY,qBAChCV,EACAhU,EACAiU,EACAC,MACDpC,EAAAD,KAAAhM,MACC9E,EAAUoF,KANO2L,EAAA/L,QAavB,IAAMoQ,EAAoCjM,iBAAe8B,cAAc4J,EAAYtO,YAAYC,SAAU,GACnG6O,EAAqClM,iBAAe8B,cAAc4J,EAAYpO,aAAaD,SAAU,GAErGoE,EAA6CyJ,EAAOzO,QACxD,SAAC0P,EAAKrC,GAAK,OAAKqC,EAAIxN,IAAImL,EAAMrI,iBAAiB3L,EAAQwB,sBACvD4U,GAGIE,EAA2ClB,EAAOzO,QACtD,SAAC0P,EAAKrC,GAAK,OAAKqC,EAAIxN,IAAImL,EAAMxM,gBAC9B4O,GAGIG,EAA0CnB,EAAOzO,QACrD,SAAC0P,EAAKrC,GAAK,OAAKqC,EAAIxN,IAAImL,EAAM/H,gBAAgBjM,EAAQwB,sBACtD2U,GAGF,MAAO,CACLpV,UAAAA,EACA6U,YAAAA,EACA3B,kBAAAA,EACA4B,cAAAA,EACAE,eAAAA,EACAQ,cAAAA,EACA5K,iBAAAA,EACA2K,eAAAA,IAIJxC,EAKc0C,mBAAP,SACLpB,EAUApV,GAEA,IAAAyW,EAQI3C,EAAWqB,YAAYC,EAAQpV,GAPjCe,EAAS0V,EAAT1V,UACA6U,EAAWa,EAAXb,YAEAC,EAAaY,EAAbZ,cAEAU,EAAaE,EAAbF,cACA5K,EAAgB8K,EAAhB9K,iBAyBF,OA7BmB8K,EAAjBxC,mBAUElT,EAAUoF,KAREsQ,EAAdV,eAQiB5R,EAAiBC,kBAAkBuH,EAAiB3J,SAAUhC,EAAQwC,UAAWxC,EAAQoC,KAGtG+B,EAAiBQ,iBACfiR,EAAYpO,aAAaD,SAAS1E,QAClC8I,EAAiB3J,SACjBhC,EAAQwC,UACRxC,EAAQoC,MAQZyT,IAAkBD,EAAY3N,YAAciB,YAAUsI,cAAgBsC,EAAW4C,kBAAkBtB,KACrGrU,EAAUoF,KAAK5B,WAASoS,mBAGnB,CACLC,SAAUzT,EAAkBC,gBAAgBrC,EAAWf,EAAQ6W,6BAC/D9Q,MAAOxD,QAAMsT,EAAgBU,EAAcvU,SAAWrC,KAI1DmU,EAKcgD,yBAAP,SACL1B,EACApV,EACAqB,EACAE,EACAwV,EACAC,GAEA,IAAAC,EAQInD,EAAWqB,YAAYC,EAAQpV,GAAS,GAP1Ce,EAASkW,EAATlW,UACA8U,EAAaoB,EAAbpB,cACAE,EAAckB,EAAdlB,eACAH,EAAWqB,EAAXrB,YACesB,EAAkBD,EAAjCV,cACAD,EAAcW,EAAdX,eACA3K,EAAgBsL,EAAhBtL,iBAIE3L,EAAQmX,oBACAb,EAAe/O,SAASiG,SAAlCvM,MACAF,EAAUoF,KAAK8P,aAAWC,aAAaI,EAAe/O,SAAUvH,EAAQmX,qBAG1E,IAAM/R,EAAUwQ,EAAY/N,MAAMzC,QAC5BgS,EAAa/V,EAASa,KAAKD,OAAOY,QAAQnC,UAAYwW,EAAmB3P,SAAS1E,QAAQnC,QAChG2W,EAAgDvD,EAAWwD,mBAAmBjW,EAAU+V,GAAhFG,EAAgBF,EAAhBE,iBAAkBC,EAAiBH,EAAjBG,kBAGpBnD,EAAUwB,EAAgB4B,QAAMrS,GAAWmS,EAAiBhQ,SAAS1E,QACrEqK,EAAW6I,EAAiB0B,QAAMrS,GAAWoS,EAAkBjQ,SAAS1E,QAGxE6U,EAAqBF,EAAkBhI,SAAS8G,EAAezT,SACjE6U,EAAmBC,YAAYzN,iBAAe8B,cAAcwL,EAAkBjQ,SAAU,KAItFxG,EAAUoF,KADd4P,EACmB5R,EAAiBW,cAAc4S,EAAmB1V,UAClDmC,EAAiBS,WAAWsI,EAAUwK,EAAmB1V,WAK1EjB,EAAUoF,KADd0P,EACmB1R,EAAiBW,cAAcyS,EAAiBvV,UAChDmC,EAAiBS,WAAWyP,EAASkD,EAAiBvV,WAGrE+U,IAAwBvX,sBAAcoY,cACxC7W,EAAUoF,KAAK9F,EAAeqC,cAAc2R,EAAS0C,IACnDC,IAAyBxX,sBAAcoY,cACzC7W,EAAUoF,KAAK9F,EAAeqC,cAAcwK,EAAU8J,IAIxD,IAsBIjR,EAtBEzE,EAAkBuW,WAASC,YAAY,CAC3C5V,KAAMb,EAASa,KACfG,UAAWhB,EAASgB,UACpBC,UAAWjB,EAASiB,UACpBV,QAASwV,EAAa/V,EAASO,QAAQI,SAAS+V,WAAapM,EAAiB3J,SAAS+V,WACvFjW,QAASsV,EAAazL,EAAiB3J,SAAS+V,WAAa1W,EAASS,QAAQE,SAAS+V,WACvFC,kBAAkB,IAyBpB,OArBAjX,EAAUoF,KACR9F,EAAee,mBAAmBC,EAAUC,EAAiBC,EAAqBvB,EAAQwB,oBAKxFT,EAAUoF,KADd0P,EACmB1R,EAAiBC,kBAAkBzE,GACnCwE,EAAiBQ,iBAAiB0P,EAAS1U,IAE1DoB,EAAUoF,KADd4P,EACmB5R,EAAiBC,kBAAkBzE,GACnCwE,EAAiBQ,iBAAiBuI,EAAUvN,IAI7DoG,EADE8P,EACMqB,EAAmBrU,QAAQgG,IAAI0O,EAAiB1U,SAASb,SACxD+T,EACD2B,EAAmB1V,SAEnBrC,EAGH,CACLiX,SAAUzT,EAAkBC,gBAAgBrC,EAAWf,EAAQ6W,6BAC/D9Q,MAAOA,EAAMgS,aAIjBjE,EACe4C,kBAAP,SAAyBtB,GAC/B,OAAI7R,MAAMC,QAAQ4R,GACTA,EAAOjV,MAAK,SAAC6T,GAClB,OAAOF,EAAWmE,2BAA2BjE,MAGxCF,EAAWmE,2BAA2B7C,IAEhDtB,EAEcmE,2BAAP,SACNjE,GAMA,QAASA,aAAiByB,UAAYzB,EAAMzE,YAAYoI,YAAY9D,IACrEC,EAEcwD,mBAAP,SACNjW,EACA+V,GAKA,IAAA3V,EAA6BJ,EAAS6W,YAArBpW,EAAOL,EAAPK,QACXqW,EAAkBjO,iBAAe8B,cAAc3K,EAASa,KAAKD,OADpDR,EAAPG,SAEFwW,EAAkBlO,iBAAe8B,cAAc3K,EAASa,KAAKC,OAAQL,GAE3E8E,EAA8CwQ,EAC1C,CAACe,EAAiBC,GAClB,CAACA,EAAiBD,GACtB,MAAO,CAAEZ,iBAHc3Q,KAGI4Q,kBAHe5Q,OAI3CkN,KA1lBaA,YAAuB,IAAI7Q,YAAUC,iUV5Ed"}